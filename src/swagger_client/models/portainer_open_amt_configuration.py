# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PortainerOpenAMTConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_file_content': 'str',
        'cert_file_name': 'str',
        'cert_file_password': 'str',
        'domain_name': 'str',
        'enabled': 'bool',
        'mps_password': 'str',
        'mps_server': 'str',
        'mps_token': 'str',
        'mps_user': 'str'
    }

    attribute_map = {
        'cert_file_content': 'certFileContent',
        'cert_file_name': 'certFileName',
        'cert_file_password': 'certFilePassword',
        'domain_name': 'domainName',
        'enabled': 'enabled',
        'mps_password': 'mpsPassword',
        'mps_server': 'mpsServer',
        'mps_token': 'mpsToken',
        'mps_user': 'mpsUser'
    }

    def __init__(self, cert_file_content=None, cert_file_name=None, cert_file_password=None, domain_name=None, enabled=None, mps_password=None, mps_server=None, mps_token=None, mps_user=None, _configuration=None):  # noqa: E501
        """PortainerOpenAMTConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cert_file_content = None
        self._cert_file_name = None
        self._cert_file_password = None
        self._domain_name = None
        self._enabled = None
        self._mps_password = None
        self._mps_server = None
        self._mps_token = None
        self._mps_user = None
        self.discriminator = None

        if cert_file_content is not None:
            self.cert_file_content = cert_file_content
        if cert_file_name is not None:
            self.cert_file_name = cert_file_name
        if cert_file_password is not None:
            self.cert_file_password = cert_file_password
        if domain_name is not None:
            self.domain_name = domain_name
        if enabled is not None:
            self.enabled = enabled
        if mps_password is not None:
            self.mps_password = mps_password
        if mps_server is not None:
            self.mps_server = mps_server
        if mps_token is not None:
            self.mps_token = mps_token
        if mps_user is not None:
            self.mps_user = mps_user

    @property
    def cert_file_content(self):
        """Gets the cert_file_content of this PortainerOpenAMTConfiguration.  # noqa: E501


        :return: The cert_file_content of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cert_file_content

    @cert_file_content.setter
    def cert_file_content(self, cert_file_content):
        """Sets the cert_file_content of this PortainerOpenAMTConfiguration.


        :param cert_file_content: The cert_file_content of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: str
        """

        self._cert_file_content = cert_file_content

    @property
    def cert_file_name(self):
        """Gets the cert_file_name of this PortainerOpenAMTConfiguration.  # noqa: E501


        :return: The cert_file_name of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cert_file_name

    @cert_file_name.setter
    def cert_file_name(self, cert_file_name):
        """Sets the cert_file_name of this PortainerOpenAMTConfiguration.


        :param cert_file_name: The cert_file_name of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: str
        """

        self._cert_file_name = cert_file_name

    @property
    def cert_file_password(self):
        """Gets the cert_file_password of this PortainerOpenAMTConfiguration.  # noqa: E501


        :return: The cert_file_password of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cert_file_password

    @cert_file_password.setter
    def cert_file_password(self, cert_file_password):
        """Sets the cert_file_password of this PortainerOpenAMTConfiguration.


        :param cert_file_password: The cert_file_password of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: str
        """

        self._cert_file_password = cert_file_password

    @property
    def domain_name(self):
        """Gets the domain_name of this PortainerOpenAMTConfiguration.  # noqa: E501


        :return: The domain_name of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this PortainerOpenAMTConfiguration.


        :param domain_name: The domain_name of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def enabled(self):
        """Gets the enabled of this PortainerOpenAMTConfiguration.  # noqa: E501


        :return: The enabled of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PortainerOpenAMTConfiguration.


        :param enabled: The enabled of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def mps_password(self):
        """Gets the mps_password of this PortainerOpenAMTConfiguration.  # noqa: E501


        :return: The mps_password of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._mps_password

    @mps_password.setter
    def mps_password(self, mps_password):
        """Sets the mps_password of this PortainerOpenAMTConfiguration.


        :param mps_password: The mps_password of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: str
        """

        self._mps_password = mps_password

    @property
    def mps_server(self):
        """Gets the mps_server of this PortainerOpenAMTConfiguration.  # noqa: E501


        :return: The mps_server of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._mps_server

    @mps_server.setter
    def mps_server(self, mps_server):
        """Sets the mps_server of this PortainerOpenAMTConfiguration.


        :param mps_server: The mps_server of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: str
        """

        self._mps_server = mps_server

    @property
    def mps_token(self):
        """Gets the mps_token of this PortainerOpenAMTConfiguration.  # noqa: E501

        retrieved from API  # noqa: E501

        :return: The mps_token of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._mps_token

    @mps_token.setter
    def mps_token(self, mps_token):
        """Sets the mps_token of this PortainerOpenAMTConfiguration.

        retrieved from API  # noqa: E501

        :param mps_token: The mps_token of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: str
        """

        self._mps_token = mps_token

    @property
    def mps_user(self):
        """Gets the mps_user of this PortainerOpenAMTConfiguration.  # noqa: E501


        :return: The mps_user of this PortainerOpenAMTConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._mps_user

    @mps_user.setter
    def mps_user(self, mps_user):
        """Sets the mps_user of this PortainerOpenAMTConfiguration.


        :param mps_user: The mps_user of this PortainerOpenAMTConfiguration.  # noqa: E501
        :type: str
        """

        self._mps_user = mps_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerOpenAMTConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerOpenAMTConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerOpenAMTConfiguration):
            return True

        return self.to_dict() != other.to_dict()
