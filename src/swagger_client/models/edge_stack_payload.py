# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdgeStackPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dir_entries': 'list[FilesystemDirEntry]',
        'edge_update_id': 'int',
        'entry_file_name': 'str',
        'env_vars': 'list[PortainerPair]',
        'filesystem_path': 'str',
        'id': 'int',
        'name': 'str',
        'namespace': 'str',
        'pre_pull_image': 'bool',
        're_pull_image': 'bool',
        'ready_re_pull_image': 'bool',
        'registry_credentials': 'list[EdgeRegistryCredentials]',
        'retry_deploy': 'bool',
        'rollback_to': 'int',
        'stack_file_content': 'str',
        'support_relative_path': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'dir_entries': 'dirEntries',
        'edge_update_id': 'edgeUpdateID',
        'entry_file_name': 'entryFileName',
        'env_vars': 'envVars',
        'filesystem_path': 'filesystemPath',
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'pre_pull_image': 'prePullImage',
        're_pull_image': 'rePullImage',
        'ready_re_pull_image': 'readyRePullImage',
        'registry_credentials': 'registryCredentials',
        'retry_deploy': 'retryDeploy',
        'rollback_to': 'rollbackTo',
        'stack_file_content': 'stackFileContent',
        'support_relative_path': 'supportRelativePath',
        'version': 'version'
    }

    def __init__(self, dir_entries=None, edge_update_id=None, entry_file_name=None, env_vars=None, filesystem_path=None, id=None, name=None, namespace=None, pre_pull_image=None, re_pull_image=None, ready_re_pull_image=None, registry_credentials=None, retry_deploy=None, rollback_to=None, stack_file_content=None, support_relative_path=None, version=None, _configuration=None):  # noqa: E501
        """EdgeStackPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dir_entries = None
        self._edge_update_id = None
        self._entry_file_name = None
        self._env_vars = None
        self._filesystem_path = None
        self._id = None
        self._name = None
        self._namespace = None
        self._pre_pull_image = None
        self._re_pull_image = None
        self._ready_re_pull_image = None
        self._registry_credentials = None
        self._retry_deploy = None
        self._rollback_to = None
        self._stack_file_content = None
        self._support_relative_path = None
        self._version = None
        self.discriminator = None

        if dir_entries is not None:
            self.dir_entries = dir_entries
        if edge_update_id is not None:
            self.edge_update_id = edge_update_id
        if entry_file_name is not None:
            self.entry_file_name = entry_file_name
        if env_vars is not None:
            self.env_vars = env_vars
        if filesystem_path is not None:
            self.filesystem_path = filesystem_path
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if pre_pull_image is not None:
            self.pre_pull_image = pre_pull_image
        if re_pull_image is not None:
            self.re_pull_image = re_pull_image
        if ready_re_pull_image is not None:
            self.ready_re_pull_image = ready_re_pull_image
        if registry_credentials is not None:
            self.registry_credentials = registry_credentials
        if retry_deploy is not None:
            self.retry_deploy = retry_deploy
        if rollback_to is not None:
            self.rollback_to = rollback_to
        if stack_file_content is not None:
            self.stack_file_content = stack_file_content
        if support_relative_path is not None:
            self.support_relative_path = support_relative_path
        if version is not None:
            self.version = version

    @property
    def dir_entries(self):
        """Gets the dir_entries of this EdgeStackPayload.  # noqa: E501

        Content of stack folder  # noqa: E501

        :return: The dir_entries of this EdgeStackPayload.  # noqa: E501
        :rtype: list[FilesystemDirEntry]
        """
        return self._dir_entries

    @dir_entries.setter
    def dir_entries(self, dir_entries):
        """Sets the dir_entries of this EdgeStackPayload.

        Content of stack folder  # noqa: E501

        :param dir_entries: The dir_entries of this EdgeStackPayload.  # noqa: E501
        :type: list[FilesystemDirEntry]
        """

        self._dir_entries = dir_entries

    @property
    def edge_update_id(self):
        """Gets the edge_update_id of this EdgeStackPayload.  # noqa: E501

        EdgeUpdateID is the ID of the edge update related to this stack. Used only for EE  # noqa: E501

        :return: The edge_update_id of this EdgeStackPayload.  # noqa: E501
        :rtype: int
        """
        return self._edge_update_id

    @edge_update_id.setter
    def edge_update_id(self, edge_update_id):
        """Sets the edge_update_id of this EdgeStackPayload.

        EdgeUpdateID is the ID of the edge update related to this stack. Used only for EE  # noqa: E501

        :param edge_update_id: The edge_update_id of this EdgeStackPayload.  # noqa: E501
        :type: int
        """

        self._edge_update_id = edge_update_id

    @property
    def entry_file_name(self):
        """Gets the entry_file_name of this EdgeStackPayload.  # noqa: E501

        Name of the stack entry file  # noqa: E501

        :return: The entry_file_name of this EdgeStackPayload.  # noqa: E501
        :rtype: str
        """
        return self._entry_file_name

    @entry_file_name.setter
    def entry_file_name(self, entry_file_name):
        """Sets the entry_file_name of this EdgeStackPayload.

        Name of the stack entry file  # noqa: E501

        :param entry_file_name: The entry_file_name of this EdgeStackPayload.  # noqa: E501
        :type: str
        """

        self._entry_file_name = entry_file_name

    @property
    def env_vars(self):
        """Gets the env_vars of this EdgeStackPayload.  # noqa: E501

        Used only for EE EnvVars is a list of environment variables to inject into the stack  # noqa: E501

        :return: The env_vars of this EdgeStackPayload.  # noqa: E501
        :rtype: list[PortainerPair]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this EdgeStackPayload.

        Used only for EE EnvVars is a list of environment variables to inject into the stack  # noqa: E501

        :param env_vars: The env_vars of this EdgeStackPayload.  # noqa: E501
        :type: list[PortainerPair]
        """

        self._env_vars = env_vars

    @property
    def filesystem_path(self):
        """Gets the filesystem_path of this EdgeStackPayload.  # noqa: E501

        Mount point for relative path  # noqa: E501

        :return: The filesystem_path of this EdgeStackPayload.  # noqa: E501
        :rtype: str
        """
        return self._filesystem_path

    @filesystem_path.setter
    def filesystem_path(self, filesystem_path):
        """Sets the filesystem_path of this EdgeStackPayload.

        Mount point for relative path  # noqa: E501

        :param filesystem_path: The filesystem_path of this EdgeStackPayload.  # noqa: E501
        :type: str
        """

        self._filesystem_path = filesystem_path

    @property
    def id(self):
        """Gets the id of this EdgeStackPayload.  # noqa: E501

        ID of the stack  # noqa: E501

        :return: The id of this EdgeStackPayload.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeStackPayload.

        ID of the stack  # noqa: E501

        :param id: The id of this EdgeStackPayload.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EdgeStackPayload.  # noqa: E501

        Name of the stack  # noqa: E501

        :return: The name of this EdgeStackPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EdgeStackPayload.

        Name of the stack  # noqa: E501

        :param name: The name of this EdgeStackPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this EdgeStackPayload.  # noqa: E501

        Namespace to use for kubernetes stack. Keep empty to use the manifest namespace.  # noqa: E501

        :return: The namespace of this EdgeStackPayload.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EdgeStackPayload.

        Namespace to use for kubernetes stack. Keep empty to use the manifest namespace.  # noqa: E501

        :param namespace: The namespace of this EdgeStackPayload.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def pre_pull_image(self):
        """Gets the pre_pull_image of this EdgeStackPayload.  # noqa: E501

        PrePullImage is a flag indicating if the agent should pull the image before deploying the stack. Used only for EE  # noqa: E501

        :return: The pre_pull_image of this EdgeStackPayload.  # noqa: E501
        :rtype: bool
        """
        return self._pre_pull_image

    @pre_pull_image.setter
    def pre_pull_image(self, pre_pull_image):
        """Sets the pre_pull_image of this EdgeStackPayload.

        PrePullImage is a flag indicating if the agent should pull the image before deploying the stack. Used only for EE  # noqa: E501

        :param pre_pull_image: The pre_pull_image of this EdgeStackPayload.  # noqa: E501
        :type: bool
        """

        self._pre_pull_image = pre_pull_image

    @property
    def re_pull_image(self):
        """Gets the re_pull_image of this EdgeStackPayload.  # noqa: E501

        RePullImage is a flag indicating if the agent should pull the image if it is already present on the node. Used only for EE  # noqa: E501

        :return: The re_pull_image of this EdgeStackPayload.  # noqa: E501
        :rtype: bool
        """
        return self._re_pull_image

    @re_pull_image.setter
    def re_pull_image(self, re_pull_image):
        """Sets the re_pull_image of this EdgeStackPayload.

        RePullImage is a flag indicating if the agent should pull the image if it is already present on the node. Used only for EE  # noqa: E501

        :param re_pull_image: The re_pull_image of this EdgeStackPayload.  # noqa: E501
        :type: bool
        """

        self._re_pull_image = re_pull_image

    @property
    def ready_re_pull_image(self):
        """Gets the ready_re_pull_image of this EdgeStackPayload.  # noqa: E501

        Used only for EE async edge agent ReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image  # noqa: E501

        :return: The ready_re_pull_image of this EdgeStackPayload.  # noqa: E501
        :rtype: bool
        """
        return self._ready_re_pull_image

    @ready_re_pull_image.setter
    def ready_re_pull_image(self, ready_re_pull_image):
        """Sets the ready_re_pull_image of this EdgeStackPayload.

        Used only for EE async edge agent ReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image  # noqa: E501

        :param ready_re_pull_image: The ready_re_pull_image of this EdgeStackPayload.  # noqa: E501
        :type: bool
        """

        self._ready_re_pull_image = ready_re_pull_image

    @property
    def registry_credentials(self):
        """Gets the registry_credentials of this EdgeStackPayload.  # noqa: E501

        RegistryCredentials holds the credentials for a Docker registry. Used only for EE  # noqa: E501

        :return: The registry_credentials of this EdgeStackPayload.  # noqa: E501
        :rtype: list[EdgeRegistryCredentials]
        """
        return self._registry_credentials

    @registry_credentials.setter
    def registry_credentials(self, registry_credentials):
        """Sets the registry_credentials of this EdgeStackPayload.

        RegistryCredentials holds the credentials for a Docker registry. Used only for EE  # noqa: E501

        :param registry_credentials: The registry_credentials of this EdgeStackPayload.  # noqa: E501
        :type: list[EdgeRegistryCredentials]
        """

        self._registry_credentials = registry_credentials

    @property
    def retry_deploy(self):
        """Gets the retry_deploy of this EdgeStackPayload.  # noqa: E501

        RetryDeploy is a flag indicating if the agent should retry to deploy the stack if it fails. Used only for EE  # noqa: E501

        :return: The retry_deploy of this EdgeStackPayload.  # noqa: E501
        :rtype: bool
        """
        return self._retry_deploy

    @retry_deploy.setter
    def retry_deploy(self, retry_deploy):
        """Sets the retry_deploy of this EdgeStackPayload.

        RetryDeploy is a flag indicating if the agent should retry to deploy the stack if it fails. Used only for EE  # noqa: E501

        :param retry_deploy: The retry_deploy of this EdgeStackPayload.  # noqa: E501
        :type: bool
        """

        self._retry_deploy = retry_deploy

    @property
    def rollback_to(self):
        """Gets the rollback_to of this EdgeStackPayload.  # noqa: E501

        RollbackTo specifies the stack file version to rollback to (only support to rollback to the last version currently)  # noqa: E501

        :return: The rollback_to of this EdgeStackPayload.  # noqa: E501
        :rtype: int
        """
        return self._rollback_to

    @rollback_to.setter
    def rollback_to(self, rollback_to):
        """Sets the rollback_to of this EdgeStackPayload.

        RollbackTo specifies the stack file version to rollback to (only support to rollback to the last version currently)  # noqa: E501

        :param rollback_to: The rollback_to of this EdgeStackPayload.  # noqa: E501
        :type: int
        """

        self._rollback_to = rollback_to

    @property
    def stack_file_content(self):
        """Gets the stack_file_content of this EdgeStackPayload.  # noqa: E501

        Content of the stack file (for compatibility to agent version less than 2.19.0)  # noqa: E501

        :return: The stack_file_content of this EdgeStackPayload.  # noqa: E501
        :rtype: str
        """
        return self._stack_file_content

    @stack_file_content.setter
    def stack_file_content(self, stack_file_content):
        """Sets the stack_file_content of this EdgeStackPayload.

        Content of the stack file (for compatibility to agent version less than 2.19.0)  # noqa: E501

        :param stack_file_content: The stack_file_content of this EdgeStackPayload.  # noqa: E501
        :type: str
        """

        self._stack_file_content = stack_file_content

    @property
    def support_relative_path(self):
        """Gets the support_relative_path of this EdgeStackPayload.  # noqa: E501

        Is relative path supported  # noqa: E501

        :return: The support_relative_path of this EdgeStackPayload.  # noqa: E501
        :rtype: bool
        """
        return self._support_relative_path

    @support_relative_path.setter
    def support_relative_path(self, support_relative_path):
        """Sets the support_relative_path of this EdgeStackPayload.

        Is relative path supported  # noqa: E501

        :param support_relative_path: The support_relative_path of this EdgeStackPayload.  # noqa: E501
        :type: bool
        """

        self._support_relative_path = support_relative_path

    @property
    def version(self):
        """Gets the version of this EdgeStackPayload.  # noqa: E501

        Version of the stack file  # noqa: E501

        :return: The version of this EdgeStackPayload.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EdgeStackPayload.

        Version of the stack file  # noqa: E501

        :param version: The version of this EdgeStackPayload.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeStackPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeStackPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdgeStackPayload):
            return True

        return self.to_dict() != other.to_dict()
