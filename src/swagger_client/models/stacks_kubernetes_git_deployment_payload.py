# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StacksKubernetesGitDeploymentPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_files': 'list[str]',
        'auto_update': 'PortainerAutoUpdateSettings',
        'compose_format': 'bool',
        'manifest_file': 'str',
        'namespace': 'str',
        'repository_authentication': 'bool',
        'repository_password': 'str',
        'repository_reference_name': 'str',
        'repository_url': 'str',
        'repository_username': 'str',
        'stack_name': 'str',
        'tlsskip_verify': 'bool'
    }

    attribute_map = {
        'additional_files': 'additionalFiles',
        'auto_update': 'autoUpdate',
        'compose_format': 'composeFormat',
        'manifest_file': 'manifestFile',
        'namespace': 'namespace',
        'repository_authentication': 'repositoryAuthentication',
        'repository_password': 'repositoryPassword',
        'repository_reference_name': 'repositoryReferenceName',
        'repository_url': 'repositoryURL',
        'repository_username': 'repositoryUsername',
        'stack_name': 'stackName',
        'tlsskip_verify': 'tlsskipVerify'
    }

    def __init__(self, additional_files=None, auto_update=None, compose_format=None, manifest_file=None, namespace=None, repository_authentication=None, repository_password=None, repository_reference_name=None, repository_url=None, repository_username=None, stack_name=None, tlsskip_verify=None, _configuration=None):  # noqa: E501
        """StacksKubernetesGitDeploymentPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._additional_files = None
        self._auto_update = None
        self._compose_format = None
        self._manifest_file = None
        self._namespace = None
        self._repository_authentication = None
        self._repository_password = None
        self._repository_reference_name = None
        self._repository_url = None
        self._repository_username = None
        self._stack_name = None
        self._tlsskip_verify = None
        self.discriminator = None

        if additional_files is not None:
            self.additional_files = additional_files
        if auto_update is not None:
            self.auto_update = auto_update
        if compose_format is not None:
            self.compose_format = compose_format
        if manifest_file is not None:
            self.manifest_file = manifest_file
        if namespace is not None:
            self.namespace = namespace
        if repository_authentication is not None:
            self.repository_authentication = repository_authentication
        if repository_password is not None:
            self.repository_password = repository_password
        if repository_reference_name is not None:
            self.repository_reference_name = repository_reference_name
        if repository_url is not None:
            self.repository_url = repository_url
        if repository_username is not None:
            self.repository_username = repository_username
        if stack_name is not None:
            self.stack_name = stack_name
        if tlsskip_verify is not None:
            self.tlsskip_verify = tlsskip_verify

    @property
    def additional_files(self):
        """Gets the additional_files of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The additional_files of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_files

    @additional_files.setter
    def additional_files(self, additional_files):
        """Sets the additional_files of this StacksKubernetesGitDeploymentPayload.


        :param additional_files: The additional_files of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: list[str]
        """

        self._additional_files = additional_files

    @property
    def auto_update(self):
        """Gets the auto_update of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The auto_update of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: PortainerAutoUpdateSettings
        """
        return self._auto_update

    @auto_update.setter
    def auto_update(self, auto_update):
        """Sets the auto_update of this StacksKubernetesGitDeploymentPayload.


        :param auto_update: The auto_update of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: PortainerAutoUpdateSettings
        """

        self._auto_update = auto_update

    @property
    def compose_format(self):
        """Gets the compose_format of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The compose_format of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: bool
        """
        return self._compose_format

    @compose_format.setter
    def compose_format(self, compose_format):
        """Sets the compose_format of this StacksKubernetesGitDeploymentPayload.


        :param compose_format: The compose_format of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: bool
        """

        self._compose_format = compose_format

    @property
    def manifest_file(self):
        """Gets the manifest_file of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The manifest_file of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: str
        """
        return self._manifest_file

    @manifest_file.setter
    def manifest_file(self, manifest_file):
        """Sets the manifest_file of this StacksKubernetesGitDeploymentPayload.


        :param manifest_file: The manifest_file of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: str
        """

        self._manifest_file = manifest_file

    @property
    def namespace(self):
        """Gets the namespace of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The namespace of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this StacksKubernetesGitDeploymentPayload.


        :param namespace: The namespace of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def repository_authentication(self):
        """Gets the repository_authentication of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The repository_authentication of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: bool
        """
        return self._repository_authentication

    @repository_authentication.setter
    def repository_authentication(self, repository_authentication):
        """Sets the repository_authentication of this StacksKubernetesGitDeploymentPayload.


        :param repository_authentication: The repository_authentication of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: bool
        """

        self._repository_authentication = repository_authentication

    @property
    def repository_password(self):
        """Gets the repository_password of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The repository_password of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: str
        """
        return self._repository_password

    @repository_password.setter
    def repository_password(self, repository_password):
        """Sets the repository_password of this StacksKubernetesGitDeploymentPayload.


        :param repository_password: The repository_password of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: str
        """

        self._repository_password = repository_password

    @property
    def repository_reference_name(self):
        """Gets the repository_reference_name of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The repository_reference_name of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: str
        """
        return self._repository_reference_name

    @repository_reference_name.setter
    def repository_reference_name(self, repository_reference_name):
        """Sets the repository_reference_name of this StacksKubernetesGitDeploymentPayload.


        :param repository_reference_name: The repository_reference_name of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: str
        """

        self._repository_reference_name = repository_reference_name

    @property
    def repository_url(self):
        """Gets the repository_url of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The repository_url of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this StacksKubernetesGitDeploymentPayload.


        :param repository_url: The repository_url of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: str
        """

        self._repository_url = repository_url

    @property
    def repository_username(self):
        """Gets the repository_username of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The repository_username of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: str
        """
        return self._repository_username

    @repository_username.setter
    def repository_username(self, repository_username):
        """Sets the repository_username of this StacksKubernetesGitDeploymentPayload.


        :param repository_username: The repository_username of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: str
        """

        self._repository_username = repository_username

    @property
    def stack_name(self):
        """Gets the stack_name of this StacksKubernetesGitDeploymentPayload.  # noqa: E501


        :return: The stack_name of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this StacksKubernetesGitDeploymentPayload.


        :param stack_name: The stack_name of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    @property
    def tlsskip_verify(self):
        """Gets the tlsskip_verify of this StacksKubernetesGitDeploymentPayload.  # noqa: E501

        TLSSkipVerify skips SSL verification when cloning the Git repository  # noqa: E501

        :return: The tlsskip_verify of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :rtype: bool
        """
        return self._tlsskip_verify

    @tlsskip_verify.setter
    def tlsskip_verify(self, tlsskip_verify):
        """Sets the tlsskip_verify of this StacksKubernetesGitDeploymentPayload.

        TLSSkipVerify skips SSL verification when cloning the Git repository  # noqa: E501

        :param tlsskip_verify: The tlsskip_verify of this StacksKubernetesGitDeploymentPayload.  # noqa: E501
        :type: bool
        """

        self._tlsskip_verify = tlsskip_verify

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StacksKubernetesGitDeploymentPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StacksKubernetesGitDeploymentPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StacksKubernetesGitDeploymentPayload):
            return True

        return self.to_dict() != other.to_dict()
