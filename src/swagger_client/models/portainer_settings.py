# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PortainerSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_secret': 'str',
        'allow_bind_mounts_for_regular_users': 'bool',
        'allow_container_capabilities_for_regular_users': 'bool',
        'allow_device_mapping_for_regular_users': 'bool',
        'allow_host_namespace_for_regular_users': 'bool',
        'allow_privileged_mode_for_regular_users': 'bool',
        'allow_stack_management_for_regular_users': 'bool',
        'allow_volume_browser_for_regular_users': 'bool',
        'authentication_method': 'int',
        'black_listed_labels': 'list[PortainerPair]',
        'display_donation_header': 'bool',
        'display_external_contributors': 'bool',
        'edge_agent_checkin_interval': 'int',
        'edge_portainer_url': 'str',
        'enable_edge_compute_features': 'bool',
        'enable_host_management_features': 'bool',
        'enable_telemetry': 'bool',
        'enforce_edge_id': 'bool',
        'feature_flag_settings': 'dict(str, bool)',
        'global_deployment_options': 'PortainerGlobalDeploymentOptions',
        'helm_repository_url': 'str',
        'internal_auth_settings': 'PortainerInternalAuthSettings',
        'is_docker_desktop_extension': 'bool',
        'kubeconfig_expiry': 'str',
        'kubectl_shell_image': 'str',
        'ldap_settings': 'PortainerLDAPSettings',
        'logo_url': 'str',
        'o_auth_settings': 'PortainerOAuthSettings',
        'show_kompose_build_option': 'bool',
        'snapshot_interval': 'str',
        'templates_url': 'str',
        'trust_on_first_connect': 'bool',
        'user_session_timeout': 'str',
        'edge': 'PortainerSettingsEdge',
        'fdo_configuration': 'PortainerFDOConfiguration',
        'open_amt_configuration': 'PortainerOpenAMTConfiguration'
    }

    attribute_map = {
        'agent_secret': 'AgentSecret',
        'allow_bind_mounts_for_regular_users': 'AllowBindMountsForRegularUsers',
        'allow_container_capabilities_for_regular_users': 'AllowContainerCapabilitiesForRegularUsers',
        'allow_device_mapping_for_regular_users': 'AllowDeviceMappingForRegularUsers',
        'allow_host_namespace_for_regular_users': 'AllowHostNamespaceForRegularUsers',
        'allow_privileged_mode_for_regular_users': 'AllowPrivilegedModeForRegularUsers',
        'allow_stack_management_for_regular_users': 'AllowStackManagementForRegularUsers',
        'allow_volume_browser_for_regular_users': 'AllowVolumeBrowserForRegularUsers',
        'authentication_method': 'AuthenticationMethod',
        'black_listed_labels': 'BlackListedLabels',
        'display_donation_header': 'DisplayDonationHeader',
        'display_external_contributors': 'DisplayExternalContributors',
        'edge_agent_checkin_interval': 'EdgeAgentCheckinInterval',
        'edge_portainer_url': 'EdgePortainerUrl',
        'enable_edge_compute_features': 'EnableEdgeComputeFeatures',
        'enable_host_management_features': 'EnableHostManagementFeatures',
        'enable_telemetry': 'EnableTelemetry',
        'enforce_edge_id': 'EnforceEdgeID',
        'feature_flag_settings': 'FeatureFlagSettings',
        'global_deployment_options': 'GlobalDeploymentOptions',
        'helm_repository_url': 'HelmRepositoryURL',
        'internal_auth_settings': 'InternalAuthSettings',
        'is_docker_desktop_extension': 'IsDockerDesktopExtension',
        'kubeconfig_expiry': 'KubeconfigExpiry',
        'kubectl_shell_image': 'KubectlShellImage',
        'ldap_settings': 'LDAPSettings',
        'logo_url': 'LogoURL',
        'o_auth_settings': 'OAuthSettings',
        'show_kompose_build_option': 'ShowKomposeBuildOption',
        'snapshot_interval': 'SnapshotInterval',
        'templates_url': 'TemplatesURL',
        'trust_on_first_connect': 'TrustOnFirstConnect',
        'user_session_timeout': 'UserSessionTimeout',
        'edge': 'edge',
        'fdo_configuration': 'fdoConfiguration',
        'open_amt_configuration': 'openAMTConfiguration'
    }

    def __init__(self, agent_secret=None, allow_bind_mounts_for_regular_users=None, allow_container_capabilities_for_regular_users=None, allow_device_mapping_for_regular_users=None, allow_host_namespace_for_regular_users=None, allow_privileged_mode_for_regular_users=None, allow_stack_management_for_regular_users=None, allow_volume_browser_for_regular_users=None, authentication_method=None, black_listed_labels=None, display_donation_header=None, display_external_contributors=None, edge_agent_checkin_interval=None, edge_portainer_url=None, enable_edge_compute_features=None, enable_host_management_features=None, enable_telemetry=None, enforce_edge_id=None, feature_flag_settings=None, global_deployment_options=None, helm_repository_url=None, internal_auth_settings=None, is_docker_desktop_extension=None, kubeconfig_expiry=None, kubectl_shell_image=None, ldap_settings=None, logo_url=None, o_auth_settings=None, show_kompose_build_option=None, snapshot_interval=None, templates_url=None, trust_on_first_connect=None, user_session_timeout=None, edge=None, fdo_configuration=None, open_amt_configuration=None, _configuration=None):  # noqa: E501
        """PortainerSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_secret = None
        self._allow_bind_mounts_for_regular_users = None
        self._allow_container_capabilities_for_regular_users = None
        self._allow_device_mapping_for_regular_users = None
        self._allow_host_namespace_for_regular_users = None
        self._allow_privileged_mode_for_regular_users = None
        self._allow_stack_management_for_regular_users = None
        self._allow_volume_browser_for_regular_users = None
        self._authentication_method = None
        self._black_listed_labels = None
        self._display_donation_header = None
        self._display_external_contributors = None
        self._edge_agent_checkin_interval = None
        self._edge_portainer_url = None
        self._enable_edge_compute_features = None
        self._enable_host_management_features = None
        self._enable_telemetry = None
        self._enforce_edge_id = None
        self._feature_flag_settings = None
        self._global_deployment_options = None
        self._helm_repository_url = None
        self._internal_auth_settings = None
        self._is_docker_desktop_extension = None
        self._kubeconfig_expiry = None
        self._kubectl_shell_image = None
        self._ldap_settings = None
        self._logo_url = None
        self._o_auth_settings = None
        self._show_kompose_build_option = None
        self._snapshot_interval = None
        self._templates_url = None
        self._trust_on_first_connect = None
        self._user_session_timeout = None
        self._edge = None
        self._fdo_configuration = None
        self._open_amt_configuration = None
        self.discriminator = None

        if agent_secret is not None:
            self.agent_secret = agent_secret
        if allow_bind_mounts_for_regular_users is not None:
            self.allow_bind_mounts_for_regular_users = allow_bind_mounts_for_regular_users
        if allow_container_capabilities_for_regular_users is not None:
            self.allow_container_capabilities_for_regular_users = allow_container_capabilities_for_regular_users
        if allow_device_mapping_for_regular_users is not None:
            self.allow_device_mapping_for_regular_users = allow_device_mapping_for_regular_users
        if allow_host_namespace_for_regular_users is not None:
            self.allow_host_namespace_for_regular_users = allow_host_namespace_for_regular_users
        if allow_privileged_mode_for_regular_users is not None:
            self.allow_privileged_mode_for_regular_users = allow_privileged_mode_for_regular_users
        if allow_stack_management_for_regular_users is not None:
            self.allow_stack_management_for_regular_users = allow_stack_management_for_regular_users
        if allow_volume_browser_for_regular_users is not None:
            self.allow_volume_browser_for_regular_users = allow_volume_browser_for_regular_users
        if authentication_method is not None:
            self.authentication_method = authentication_method
        if black_listed_labels is not None:
            self.black_listed_labels = black_listed_labels
        if display_donation_header is not None:
            self.display_donation_header = display_donation_header
        if display_external_contributors is not None:
            self.display_external_contributors = display_external_contributors
        if edge_agent_checkin_interval is not None:
            self.edge_agent_checkin_interval = edge_agent_checkin_interval
        if edge_portainer_url is not None:
            self.edge_portainer_url = edge_portainer_url
        if enable_edge_compute_features is not None:
            self.enable_edge_compute_features = enable_edge_compute_features
        if enable_host_management_features is not None:
            self.enable_host_management_features = enable_host_management_features
        if enable_telemetry is not None:
            self.enable_telemetry = enable_telemetry
        if enforce_edge_id is not None:
            self.enforce_edge_id = enforce_edge_id
        if feature_flag_settings is not None:
            self.feature_flag_settings = feature_flag_settings
        if global_deployment_options is not None:
            self.global_deployment_options = global_deployment_options
        if helm_repository_url is not None:
            self.helm_repository_url = helm_repository_url
        if internal_auth_settings is not None:
            self.internal_auth_settings = internal_auth_settings
        if is_docker_desktop_extension is not None:
            self.is_docker_desktop_extension = is_docker_desktop_extension
        if kubeconfig_expiry is not None:
            self.kubeconfig_expiry = kubeconfig_expiry
        if kubectl_shell_image is not None:
            self.kubectl_shell_image = kubectl_shell_image
        if ldap_settings is not None:
            self.ldap_settings = ldap_settings
        if logo_url is not None:
            self.logo_url = logo_url
        if o_auth_settings is not None:
            self.o_auth_settings = o_auth_settings
        if show_kompose_build_option is not None:
            self.show_kompose_build_option = show_kompose_build_option
        if snapshot_interval is not None:
            self.snapshot_interval = snapshot_interval
        if templates_url is not None:
            self.templates_url = templates_url
        if trust_on_first_connect is not None:
            self.trust_on_first_connect = trust_on_first_connect
        if user_session_timeout is not None:
            self.user_session_timeout = user_session_timeout
        if edge is not None:
            self.edge = edge
        if fdo_configuration is not None:
            self.fdo_configuration = fdo_configuration
        if open_amt_configuration is not None:
            self.open_amt_configuration = open_amt_configuration

    @property
    def agent_secret(self):
        """Gets the agent_secret of this PortainerSettings.  # noqa: E501

        Container environment parameter AGENT_SECRET  # noqa: E501

        :return: The agent_secret of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._agent_secret

    @agent_secret.setter
    def agent_secret(self, agent_secret):
        """Sets the agent_secret of this PortainerSettings.

        Container environment parameter AGENT_SECRET  # noqa: E501

        :param agent_secret: The agent_secret of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._agent_secret = agent_secret

    @property
    def allow_bind_mounts_for_regular_users(self):
        """Gets the allow_bind_mounts_for_regular_users of this PortainerSettings.  # noqa: E501


        :return: The allow_bind_mounts_for_regular_users of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bind_mounts_for_regular_users

    @allow_bind_mounts_for_regular_users.setter
    def allow_bind_mounts_for_regular_users(self, allow_bind_mounts_for_regular_users):
        """Sets the allow_bind_mounts_for_regular_users of this PortainerSettings.


        :param allow_bind_mounts_for_regular_users: The allow_bind_mounts_for_regular_users of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_bind_mounts_for_regular_users = allow_bind_mounts_for_regular_users

    @property
    def allow_container_capabilities_for_regular_users(self):
        """Gets the allow_container_capabilities_for_regular_users of this PortainerSettings.  # noqa: E501


        :return: The allow_container_capabilities_for_regular_users of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_container_capabilities_for_regular_users

    @allow_container_capabilities_for_regular_users.setter
    def allow_container_capabilities_for_regular_users(self, allow_container_capabilities_for_regular_users):
        """Sets the allow_container_capabilities_for_regular_users of this PortainerSettings.


        :param allow_container_capabilities_for_regular_users: The allow_container_capabilities_for_regular_users of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_container_capabilities_for_regular_users = allow_container_capabilities_for_regular_users

    @property
    def allow_device_mapping_for_regular_users(self):
        """Gets the allow_device_mapping_for_regular_users of this PortainerSettings.  # noqa: E501


        :return: The allow_device_mapping_for_regular_users of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_device_mapping_for_regular_users

    @allow_device_mapping_for_regular_users.setter
    def allow_device_mapping_for_regular_users(self, allow_device_mapping_for_regular_users):
        """Sets the allow_device_mapping_for_regular_users of this PortainerSettings.


        :param allow_device_mapping_for_regular_users: The allow_device_mapping_for_regular_users of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_device_mapping_for_regular_users = allow_device_mapping_for_regular_users

    @property
    def allow_host_namespace_for_regular_users(self):
        """Gets the allow_host_namespace_for_regular_users of this PortainerSettings.  # noqa: E501


        :return: The allow_host_namespace_for_regular_users of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_host_namespace_for_regular_users

    @allow_host_namespace_for_regular_users.setter
    def allow_host_namespace_for_regular_users(self, allow_host_namespace_for_regular_users):
        """Sets the allow_host_namespace_for_regular_users of this PortainerSettings.


        :param allow_host_namespace_for_regular_users: The allow_host_namespace_for_regular_users of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_host_namespace_for_regular_users = allow_host_namespace_for_regular_users

    @property
    def allow_privileged_mode_for_regular_users(self):
        """Gets the allow_privileged_mode_for_regular_users of this PortainerSettings.  # noqa: E501


        :return: The allow_privileged_mode_for_regular_users of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_privileged_mode_for_regular_users

    @allow_privileged_mode_for_regular_users.setter
    def allow_privileged_mode_for_regular_users(self, allow_privileged_mode_for_regular_users):
        """Sets the allow_privileged_mode_for_regular_users of this PortainerSettings.


        :param allow_privileged_mode_for_regular_users: The allow_privileged_mode_for_regular_users of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_privileged_mode_for_regular_users = allow_privileged_mode_for_regular_users

    @property
    def allow_stack_management_for_regular_users(self):
        """Gets the allow_stack_management_for_regular_users of this PortainerSettings.  # noqa: E501


        :return: The allow_stack_management_for_regular_users of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_stack_management_for_regular_users

    @allow_stack_management_for_regular_users.setter
    def allow_stack_management_for_regular_users(self, allow_stack_management_for_regular_users):
        """Sets the allow_stack_management_for_regular_users of this PortainerSettings.


        :param allow_stack_management_for_regular_users: The allow_stack_management_for_regular_users of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_stack_management_for_regular_users = allow_stack_management_for_regular_users

    @property
    def allow_volume_browser_for_regular_users(self):
        """Gets the allow_volume_browser_for_regular_users of this PortainerSettings.  # noqa: E501


        :return: The allow_volume_browser_for_regular_users of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_volume_browser_for_regular_users

    @allow_volume_browser_for_regular_users.setter
    def allow_volume_browser_for_regular_users(self, allow_volume_browser_for_regular_users):
        """Sets the allow_volume_browser_for_regular_users of this PortainerSettings.


        :param allow_volume_browser_for_regular_users: The allow_volume_browser_for_regular_users of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_volume_browser_for_regular_users = allow_volume_browser_for_regular_users

    @property
    def authentication_method(self):
        """Gets the authentication_method of this PortainerSettings.  # noqa: E501

        Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth  # noqa: E501

        :return: The authentication_method of this PortainerSettings.  # noqa: E501
        :rtype: int
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this PortainerSettings.

        Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth  # noqa: E501

        :param authentication_method: The authentication_method of this PortainerSettings.  # noqa: E501
        :type: int
        """

        self._authentication_method = authentication_method

    @property
    def black_listed_labels(self):
        """Gets the black_listed_labels of this PortainerSettings.  # noqa: E501

        A list of label name & value that will be used to hide containers when querying containers  # noqa: E501

        :return: The black_listed_labels of this PortainerSettings.  # noqa: E501
        :rtype: list[PortainerPair]
        """
        return self._black_listed_labels

    @black_listed_labels.setter
    def black_listed_labels(self, black_listed_labels):
        """Sets the black_listed_labels of this PortainerSettings.

        A list of label name & value that will be used to hide containers when querying containers  # noqa: E501

        :param black_listed_labels: The black_listed_labels of this PortainerSettings.  # noqa: E501
        :type: list[PortainerPair]
        """

        self._black_listed_labels = black_listed_labels

    @property
    def display_donation_header(self):
        """Gets the display_donation_header of this PortainerSettings.  # noqa: E501

        Deprecated fields  # noqa: E501

        :return: The display_donation_header of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_donation_header

    @display_donation_header.setter
    def display_donation_header(self, display_donation_header):
        """Sets the display_donation_header of this PortainerSettings.

        Deprecated fields  # noqa: E501

        :param display_donation_header: The display_donation_header of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._display_donation_header = display_donation_header

    @property
    def display_external_contributors(self):
        """Gets the display_external_contributors of this PortainerSettings.  # noqa: E501


        :return: The display_external_contributors of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_external_contributors

    @display_external_contributors.setter
    def display_external_contributors(self, display_external_contributors):
        """Sets the display_external_contributors of this PortainerSettings.


        :param display_external_contributors: The display_external_contributors of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._display_external_contributors = display_external_contributors

    @property
    def edge_agent_checkin_interval(self):
        """Gets the edge_agent_checkin_interval of this PortainerSettings.  # noqa: E501

        The default check in interval for edge agent (in seconds)  # noqa: E501

        :return: The edge_agent_checkin_interval of this PortainerSettings.  # noqa: E501
        :rtype: int
        """
        return self._edge_agent_checkin_interval

    @edge_agent_checkin_interval.setter
    def edge_agent_checkin_interval(self, edge_agent_checkin_interval):
        """Sets the edge_agent_checkin_interval of this PortainerSettings.

        The default check in interval for edge agent (in seconds)  # noqa: E501

        :param edge_agent_checkin_interval: The edge_agent_checkin_interval of this PortainerSettings.  # noqa: E501
        :type: int
        """

        self._edge_agent_checkin_interval = edge_agent_checkin_interval

    @property
    def edge_portainer_url(self):
        """Gets the edge_portainer_url of this PortainerSettings.  # noqa: E501

        EdgePortainerURL is the URL that is exposed to edge agents  # noqa: E501

        :return: The edge_portainer_url of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._edge_portainer_url

    @edge_portainer_url.setter
    def edge_portainer_url(self, edge_portainer_url):
        """Sets the edge_portainer_url of this PortainerSettings.

        EdgePortainerURL is the URL that is exposed to edge agents  # noqa: E501

        :param edge_portainer_url: The edge_portainer_url of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._edge_portainer_url = edge_portainer_url

    @property
    def enable_edge_compute_features(self):
        """Gets the enable_edge_compute_features of this PortainerSettings.  # noqa: E501

        Whether edge compute features are enabled  # noqa: E501

        :return: The enable_edge_compute_features of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_edge_compute_features

    @enable_edge_compute_features.setter
    def enable_edge_compute_features(self, enable_edge_compute_features):
        """Sets the enable_edge_compute_features of this PortainerSettings.

        Whether edge compute features are enabled  # noqa: E501

        :param enable_edge_compute_features: The enable_edge_compute_features of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._enable_edge_compute_features = enable_edge_compute_features

    @property
    def enable_host_management_features(self):
        """Gets the enable_host_management_features of this PortainerSettings.  # noqa: E501

        Deprecated fields v26  # noqa: E501

        :return: The enable_host_management_features of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_host_management_features

    @enable_host_management_features.setter
    def enable_host_management_features(self, enable_host_management_features):
        """Sets the enable_host_management_features of this PortainerSettings.

        Deprecated fields v26  # noqa: E501

        :param enable_host_management_features: The enable_host_management_features of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._enable_host_management_features = enable_host_management_features

    @property
    def enable_telemetry(self):
        """Gets the enable_telemetry of this PortainerSettings.  # noqa: E501

        Whether telemetry is enabled  # noqa: E501

        :return: The enable_telemetry of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_telemetry

    @enable_telemetry.setter
    def enable_telemetry(self, enable_telemetry):
        """Sets the enable_telemetry of this PortainerSettings.

        Whether telemetry is enabled  # noqa: E501

        :param enable_telemetry: The enable_telemetry of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._enable_telemetry = enable_telemetry

    @property
    def enforce_edge_id(self):
        """Gets the enforce_edge_id of this PortainerSettings.  # noqa: E501

        EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone  # noqa: E501

        :return: The enforce_edge_id of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_edge_id

    @enforce_edge_id.setter
    def enforce_edge_id(self, enforce_edge_id):
        """Sets the enforce_edge_id of this PortainerSettings.

        EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone  # noqa: E501

        :param enforce_edge_id: The enforce_edge_id of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._enforce_edge_id = enforce_edge_id

    @property
    def feature_flag_settings(self):
        """Gets the feature_flag_settings of this PortainerSettings.  # noqa: E501


        :return: The feature_flag_settings of this PortainerSettings.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._feature_flag_settings

    @feature_flag_settings.setter
    def feature_flag_settings(self, feature_flag_settings):
        """Sets the feature_flag_settings of this PortainerSettings.


        :param feature_flag_settings: The feature_flag_settings of this PortainerSettings.  # noqa: E501
        :type: dict(str, bool)
        """

        self._feature_flag_settings = feature_flag_settings

    @property
    def global_deployment_options(self):
        """Gets the global_deployment_options of this PortainerSettings.  # noqa: E501

        Deployment options for encouraging git ops workflows  # noqa: E501

        :return: The global_deployment_options of this PortainerSettings.  # noqa: E501
        :rtype: PortainerGlobalDeploymentOptions
        """
        return self._global_deployment_options

    @global_deployment_options.setter
    def global_deployment_options(self, global_deployment_options):
        """Sets the global_deployment_options of this PortainerSettings.

        Deployment options for encouraging git ops workflows  # noqa: E501

        :param global_deployment_options: The global_deployment_options of this PortainerSettings.  # noqa: E501
        :type: PortainerGlobalDeploymentOptions
        """

        self._global_deployment_options = global_deployment_options

    @property
    def helm_repository_url(self):
        """Gets the helm_repository_url of this PortainerSettings.  # noqa: E501

        Helm repository URL, defaults to \"https://charts.bitnami.com/bitnami\"  # noqa: E501

        :return: The helm_repository_url of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._helm_repository_url

    @helm_repository_url.setter
    def helm_repository_url(self, helm_repository_url):
        """Sets the helm_repository_url of this PortainerSettings.

        Helm repository URL, defaults to \"https://charts.bitnami.com/bitnami\"  # noqa: E501

        :param helm_repository_url: The helm_repository_url of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._helm_repository_url = helm_repository_url

    @property
    def internal_auth_settings(self):
        """Gets the internal_auth_settings of this PortainerSettings.  # noqa: E501


        :return: The internal_auth_settings of this PortainerSettings.  # noqa: E501
        :rtype: PortainerInternalAuthSettings
        """
        return self._internal_auth_settings

    @internal_auth_settings.setter
    def internal_auth_settings(self, internal_auth_settings):
        """Sets the internal_auth_settings of this PortainerSettings.


        :param internal_auth_settings: The internal_auth_settings of this PortainerSettings.  # noqa: E501
        :type: PortainerInternalAuthSettings
        """

        self._internal_auth_settings = internal_auth_settings

    @property
    def is_docker_desktop_extension(self):
        """Gets the is_docker_desktop_extension of this PortainerSettings.  # noqa: E501


        :return: The is_docker_desktop_extension of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_docker_desktop_extension

    @is_docker_desktop_extension.setter
    def is_docker_desktop_extension(self, is_docker_desktop_extension):
        """Sets the is_docker_desktop_extension of this PortainerSettings.


        :param is_docker_desktop_extension: The is_docker_desktop_extension of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._is_docker_desktop_extension = is_docker_desktop_extension

    @property
    def kubeconfig_expiry(self):
        """Gets the kubeconfig_expiry of this PortainerSettings.  # noqa: E501

        The expiry of a Kubeconfig  # noqa: E501

        :return: The kubeconfig_expiry of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._kubeconfig_expiry

    @kubeconfig_expiry.setter
    def kubeconfig_expiry(self, kubeconfig_expiry):
        """Sets the kubeconfig_expiry of this PortainerSettings.

        The expiry of a Kubeconfig  # noqa: E501

        :param kubeconfig_expiry: The kubeconfig_expiry of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._kubeconfig_expiry = kubeconfig_expiry

    @property
    def kubectl_shell_image(self):
        """Gets the kubectl_shell_image of this PortainerSettings.  # noqa: E501

        KubectlImage, defaults to portainer/kubectl-shell  # noqa: E501

        :return: The kubectl_shell_image of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._kubectl_shell_image

    @kubectl_shell_image.setter
    def kubectl_shell_image(self, kubectl_shell_image):
        """Sets the kubectl_shell_image of this PortainerSettings.

        KubectlImage, defaults to portainer/kubectl-shell  # noqa: E501

        :param kubectl_shell_image: The kubectl_shell_image of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._kubectl_shell_image = kubectl_shell_image

    @property
    def ldap_settings(self):
        """Gets the ldap_settings of this PortainerSettings.  # noqa: E501


        :return: The ldap_settings of this PortainerSettings.  # noqa: E501
        :rtype: PortainerLDAPSettings
        """
        return self._ldap_settings

    @ldap_settings.setter
    def ldap_settings(self, ldap_settings):
        """Sets the ldap_settings of this PortainerSettings.


        :param ldap_settings: The ldap_settings of this PortainerSettings.  # noqa: E501
        :type: PortainerLDAPSettings
        """

        self._ldap_settings = ldap_settings

    @property
    def logo_url(self):
        """Gets the logo_url of this PortainerSettings.  # noqa: E501

        URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string  # noqa: E501

        :return: The logo_url of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this PortainerSettings.

        URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string  # noqa: E501

        :param logo_url: The logo_url of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def o_auth_settings(self):
        """Gets the o_auth_settings of this PortainerSettings.  # noqa: E501


        :return: The o_auth_settings of this PortainerSettings.  # noqa: E501
        :rtype: PortainerOAuthSettings
        """
        return self._o_auth_settings

    @o_auth_settings.setter
    def o_auth_settings(self, o_auth_settings):
        """Sets the o_auth_settings of this PortainerSettings.


        :param o_auth_settings: The o_auth_settings of this PortainerSettings.  # noqa: E501
        :type: PortainerOAuthSettings
        """

        self._o_auth_settings = o_auth_settings

    @property
    def show_kompose_build_option(self):
        """Gets the show_kompose_build_option of this PortainerSettings.  # noqa: E501

        Show the Kompose build option (discontinued in 2.18)  # noqa: E501

        :return: The show_kompose_build_option of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_kompose_build_option

    @show_kompose_build_option.setter
    def show_kompose_build_option(self, show_kompose_build_option):
        """Sets the show_kompose_build_option of this PortainerSettings.

        Show the Kompose build option (discontinued in 2.18)  # noqa: E501

        :param show_kompose_build_option: The show_kompose_build_option of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._show_kompose_build_option = show_kompose_build_option

    @property
    def snapshot_interval(self):
        """Gets the snapshot_interval of this PortainerSettings.  # noqa: E501

        The interval in which environment(endpoint) snapshots are created  # noqa: E501

        :return: The snapshot_interval of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_interval

    @snapshot_interval.setter
    def snapshot_interval(self, snapshot_interval):
        """Sets the snapshot_interval of this PortainerSettings.

        The interval in which environment(endpoint) snapshots are created  # noqa: E501

        :param snapshot_interval: The snapshot_interval of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._snapshot_interval = snapshot_interval

    @property
    def templates_url(self):
        """Gets the templates_url of this PortainerSettings.  # noqa: E501

        URL to the templates that will be displayed in the UI when navigating to App Templates  # noqa: E501

        :return: The templates_url of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._templates_url

    @templates_url.setter
    def templates_url(self, templates_url):
        """Sets the templates_url of this PortainerSettings.

        URL to the templates that will be displayed in the UI when navigating to App Templates  # noqa: E501

        :param templates_url: The templates_url of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._templates_url = templates_url

    @property
    def trust_on_first_connect(self):
        """Gets the trust_on_first_connect of this PortainerSettings.  # noqa: E501

        TrustOnFirstConnect makes Portainer accepting edge agent connection by default  # noqa: E501

        :return: The trust_on_first_connect of this PortainerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._trust_on_first_connect

    @trust_on_first_connect.setter
    def trust_on_first_connect(self, trust_on_first_connect):
        """Sets the trust_on_first_connect of this PortainerSettings.

        TrustOnFirstConnect makes Portainer accepting edge agent connection by default  # noqa: E501

        :param trust_on_first_connect: The trust_on_first_connect of this PortainerSettings.  # noqa: E501
        :type: bool
        """

        self._trust_on_first_connect = trust_on_first_connect

    @property
    def user_session_timeout(self):
        """Gets the user_session_timeout of this PortainerSettings.  # noqa: E501

        The duration of a user session  # noqa: E501

        :return: The user_session_timeout of this PortainerSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_session_timeout

    @user_session_timeout.setter
    def user_session_timeout(self, user_session_timeout):
        """Sets the user_session_timeout of this PortainerSettings.

        The duration of a user session  # noqa: E501

        :param user_session_timeout: The user_session_timeout of this PortainerSettings.  # noqa: E501
        :type: str
        """

        self._user_session_timeout = user_session_timeout

    @property
    def edge(self):
        """Gets the edge of this PortainerSettings.  # noqa: E501


        :return: The edge of this PortainerSettings.  # noqa: E501
        :rtype: PortainerSettingsEdge
        """
        return self._edge

    @edge.setter
    def edge(self, edge):
        """Sets the edge of this PortainerSettings.


        :param edge: The edge of this PortainerSettings.  # noqa: E501
        :type: PortainerSettingsEdge
        """

        self._edge = edge

    @property
    def fdo_configuration(self):
        """Gets the fdo_configuration of this PortainerSettings.  # noqa: E501


        :return: The fdo_configuration of this PortainerSettings.  # noqa: E501
        :rtype: PortainerFDOConfiguration
        """
        return self._fdo_configuration

    @fdo_configuration.setter
    def fdo_configuration(self, fdo_configuration):
        """Sets the fdo_configuration of this PortainerSettings.


        :param fdo_configuration: The fdo_configuration of this PortainerSettings.  # noqa: E501
        :type: PortainerFDOConfiguration
        """

        self._fdo_configuration = fdo_configuration

    @property
    def open_amt_configuration(self):
        """Gets the open_amt_configuration of this PortainerSettings.  # noqa: E501


        :return: The open_amt_configuration of this PortainerSettings.  # noqa: E501
        :rtype: PortainerOpenAMTConfiguration
        """
        return self._open_amt_configuration

    @open_amt_configuration.setter
    def open_amt_configuration(self, open_amt_configuration):
        """Sets the open_amt_configuration of this PortainerSettings.


        :param open_amt_configuration: The open_amt_configuration of this PortainerSettings.  # noqa: E501
        :type: PortainerOpenAMTConfiguration
        """

        self._open_amt_configuration = open_amt_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerSettings):
            return True

        return self.to_dict() != other.to_dict()
