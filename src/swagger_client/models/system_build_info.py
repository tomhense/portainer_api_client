# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SystemBuildInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build_number': 'str',
        'env': 'list[str]',
        'git_commit': 'str',
        'go_version': 'str',
        'image_tag': 'str',
        'nodejs_version': 'str',
        'webpack_version': 'str',
        'yarn_version': 'str'
    }

    attribute_map = {
        'build_number': 'buildNumber',
        'env': 'env',
        'git_commit': 'gitCommit',
        'go_version': 'goVersion',
        'image_tag': 'imageTag',
        'nodejs_version': 'nodejsVersion',
        'webpack_version': 'webpackVersion',
        'yarn_version': 'yarnVersion'
    }

    def __init__(self, build_number=None, env=None, git_commit=None, go_version=None, image_tag=None, nodejs_version=None, webpack_version=None, yarn_version=None, _configuration=None):  # noqa: E501
        """SystemBuildInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._build_number = None
        self._env = None
        self._git_commit = None
        self._go_version = None
        self._image_tag = None
        self._nodejs_version = None
        self._webpack_version = None
        self._yarn_version = None
        self.discriminator = None

        if build_number is not None:
            self.build_number = build_number
        if env is not None:
            self.env = env
        if git_commit is not None:
            self.git_commit = git_commit
        if go_version is not None:
            self.go_version = go_version
        if image_tag is not None:
            self.image_tag = image_tag
        if nodejs_version is not None:
            self.nodejs_version = nodejs_version
        if webpack_version is not None:
            self.webpack_version = webpack_version
        if yarn_version is not None:
            self.yarn_version = yarn_version

    @property
    def build_number(self):
        """Gets the build_number of this SystemBuildInfo.  # noqa: E501


        :return: The build_number of this SystemBuildInfo.  # noqa: E501
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this SystemBuildInfo.


        :param build_number: The build_number of this SystemBuildInfo.  # noqa: E501
        :type: str
        """

        self._build_number = build_number

    @property
    def env(self):
        """Gets the env of this SystemBuildInfo.  # noqa: E501


        :return: The env of this SystemBuildInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this SystemBuildInfo.


        :param env: The env of this SystemBuildInfo.  # noqa: E501
        :type: list[str]
        """

        self._env = env

    @property
    def git_commit(self):
        """Gets the git_commit of this SystemBuildInfo.  # noqa: E501


        :return: The git_commit of this SystemBuildInfo.  # noqa: E501
        :rtype: str
        """
        return self._git_commit

    @git_commit.setter
    def git_commit(self, git_commit):
        """Sets the git_commit of this SystemBuildInfo.


        :param git_commit: The git_commit of this SystemBuildInfo.  # noqa: E501
        :type: str
        """

        self._git_commit = git_commit

    @property
    def go_version(self):
        """Gets the go_version of this SystemBuildInfo.  # noqa: E501


        :return: The go_version of this SystemBuildInfo.  # noqa: E501
        :rtype: str
        """
        return self._go_version

    @go_version.setter
    def go_version(self, go_version):
        """Sets the go_version of this SystemBuildInfo.


        :param go_version: The go_version of this SystemBuildInfo.  # noqa: E501
        :type: str
        """

        self._go_version = go_version

    @property
    def image_tag(self):
        """Gets the image_tag of this SystemBuildInfo.  # noqa: E501


        :return: The image_tag of this SystemBuildInfo.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this SystemBuildInfo.


        :param image_tag: The image_tag of this SystemBuildInfo.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    @property
    def nodejs_version(self):
        """Gets the nodejs_version of this SystemBuildInfo.  # noqa: E501


        :return: The nodejs_version of this SystemBuildInfo.  # noqa: E501
        :rtype: str
        """
        return self._nodejs_version

    @nodejs_version.setter
    def nodejs_version(self, nodejs_version):
        """Sets the nodejs_version of this SystemBuildInfo.


        :param nodejs_version: The nodejs_version of this SystemBuildInfo.  # noqa: E501
        :type: str
        """

        self._nodejs_version = nodejs_version

    @property
    def webpack_version(self):
        """Gets the webpack_version of this SystemBuildInfo.  # noqa: E501


        :return: The webpack_version of this SystemBuildInfo.  # noqa: E501
        :rtype: str
        """
        return self._webpack_version

    @webpack_version.setter
    def webpack_version(self, webpack_version):
        """Sets the webpack_version of this SystemBuildInfo.


        :param webpack_version: The webpack_version of this SystemBuildInfo.  # noqa: E501
        :type: str
        """

        self._webpack_version = webpack_version

    @property
    def yarn_version(self):
        """Gets the yarn_version of this SystemBuildInfo.  # noqa: E501


        :return: The yarn_version of this SystemBuildInfo.  # noqa: E501
        :rtype: str
        """
        return self._yarn_version

    @yarn_version.setter
    def yarn_version(self, yarn_version):
        """Sets the yarn_version of this SystemBuildInfo.


        :param yarn_version: The yarn_version of this SystemBuildInfo.  # noqa: E501
        :type: str
        """

        self._yarn_version = yarn_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemBuildInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemBuildInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemBuildInfo):
            return True

        return self.to_dict() != other.to_dict()
