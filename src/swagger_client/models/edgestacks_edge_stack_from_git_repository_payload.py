# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdgestacksEdgeStackFromGitRepositoryPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_type': 'int',
        'edge_groups': 'list[int]',
        'file_path_in_repository': 'str',
        'name': 'str',
        'registries': 'list[int]',
        'repository_authentication': 'bool',
        'repository_password': 'str',
        'repository_reference_name': 'str',
        'repository_url': 'str',
        'repository_username': 'str',
        'tlsskip_verify': 'bool',
        'use_manifest_namespaces': 'bool'
    }

    attribute_map = {
        'deployment_type': 'deploymentType',
        'edge_groups': 'edgeGroups',
        'file_path_in_repository': 'filePathInRepository',
        'name': 'name',
        'registries': 'registries',
        'repository_authentication': 'repositoryAuthentication',
        'repository_password': 'repositoryPassword',
        'repository_reference_name': 'repositoryReferenceName',
        'repository_url': 'repositoryURL',
        'repository_username': 'repositoryUsername',
        'tlsskip_verify': 'tlsskipVerify',
        'use_manifest_namespaces': 'useManifestNamespaces'
    }

    def __init__(self, deployment_type=None, edge_groups=None, file_path_in_repository='docker-compose.yml', name=None, registries=None, repository_authentication=None, repository_password=None, repository_reference_name=None, repository_url=None, repository_username=None, tlsskip_verify=None, use_manifest_namespaces=None, _configuration=None):  # noqa: E501
        """EdgestacksEdgeStackFromGitRepositoryPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deployment_type = None
        self._edge_groups = None
        self._file_path_in_repository = None
        self._name = None
        self._registries = None
        self._repository_authentication = None
        self._repository_password = None
        self._repository_reference_name = None
        self._repository_url = None
        self._repository_username = None
        self._tlsskip_verify = None
        self._use_manifest_namespaces = None
        self.discriminator = None

        if deployment_type is not None:
            self.deployment_type = deployment_type
        self.edge_groups = edge_groups
        if file_path_in_repository is not None:
            self.file_path_in_repository = file_path_in_repository
        self.name = name
        if registries is not None:
            self.registries = registries
        if repository_authentication is not None:
            self.repository_authentication = repository_authentication
        if repository_password is not None:
            self.repository_password = repository_password
        if repository_reference_name is not None:
            self.repository_reference_name = repository_reference_name
        self.repository_url = repository_url
        if repository_username is not None:
            self.repository_username = repository_username
        if tlsskip_verify is not None:
            self.tlsskip_verify = tlsskip_verify
        if use_manifest_namespaces is not None:
            self.use_manifest_namespaces = use_manifest_namespaces

    @property
    def deployment_type(self):
        """Gets the deployment_type of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        Deployment type to deploy this stack Valid values are: 0 - 'compose', 1 - 'kubernetes' compose is enabled only for docker environments kubernetes is enabled only for kubernetes environments  # noqa: E501

        :return: The deployment_type of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: int
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this EdgestacksEdgeStackFromGitRepositoryPayload.

        Deployment type to deploy this stack Valid values are: 0 - 'compose', 1 - 'kubernetes' compose is enabled only for docker environments kubernetes is enabled only for kubernetes environments  # noqa: E501

        :param deployment_type: The deployment_type of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: int
        """

        self._deployment_type = deployment_type

    @property
    def edge_groups(self):
        """Gets the edge_groups of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        List of identifiers of EdgeGroups  # noqa: E501

        :return: The edge_groups of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._edge_groups

    @edge_groups.setter
    def edge_groups(self, edge_groups):
        """Sets the edge_groups of this EdgestacksEdgeStackFromGitRepositoryPayload.

        List of identifiers of EdgeGroups  # noqa: E501

        :param edge_groups: The edge_groups of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: list[int]
        """
        if self._configuration.client_side_validation and edge_groups is None:
            raise ValueError("Invalid value for `edge_groups`, must not be `None`")  # noqa: E501

        self._edge_groups = edge_groups

    @property
    def file_path_in_repository(self):
        """Gets the file_path_in_repository of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        Path to the Stack file inside the Git repository  # noqa: E501

        :return: The file_path_in_repository of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._file_path_in_repository

    @file_path_in_repository.setter
    def file_path_in_repository(self, file_path_in_repository):
        """Sets the file_path_in_repository of this EdgestacksEdgeStackFromGitRepositoryPayload.

        Path to the Stack file inside the Git repository  # noqa: E501

        :param file_path_in_repository: The file_path_in_repository of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: str
        """

        self._file_path_in_repository = file_path_in_repository

    @property
    def name(self):
        """Gets the name of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        Name of the stack  # noqa: E501

        :return: The name of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EdgestacksEdgeStackFromGitRepositoryPayload.

        Name of the stack  # noqa: E501

        :param name: The name of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def registries(self):
        """Gets the registries of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        List of Registries to use for this stack  # noqa: E501

        :return: The registries of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._registries

    @registries.setter
    def registries(self, registries):
        """Sets the registries of this EdgestacksEdgeStackFromGitRepositoryPayload.

        List of Registries to use for this stack  # noqa: E501

        :param registries: The registries of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: list[int]
        """

        self._registries = registries

    @property
    def repository_authentication(self):
        """Gets the repository_authentication of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        Use basic authentication to clone the Git repository  # noqa: E501

        :return: The repository_authentication of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._repository_authentication

    @repository_authentication.setter
    def repository_authentication(self, repository_authentication):
        """Sets the repository_authentication of this EdgestacksEdgeStackFromGitRepositoryPayload.

        Use basic authentication to clone the Git repository  # noqa: E501

        :param repository_authentication: The repository_authentication of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: bool
        """

        self._repository_authentication = repository_authentication

    @property
    def repository_password(self):
        """Gets the repository_password of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        Password used in basic authentication. Required when RepositoryAuthentication is true.  # noqa: E501

        :return: The repository_password of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._repository_password

    @repository_password.setter
    def repository_password(self, repository_password):
        """Sets the repository_password of this EdgestacksEdgeStackFromGitRepositoryPayload.

        Password used in basic authentication. Required when RepositoryAuthentication is true.  # noqa: E501

        :param repository_password: The repository_password of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: str
        """

        self._repository_password = repository_password

    @property
    def repository_reference_name(self):
        """Gets the repository_reference_name of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        Reference name of a Git repository hosting the Stack file  # noqa: E501

        :return: The repository_reference_name of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._repository_reference_name

    @repository_reference_name.setter
    def repository_reference_name(self, repository_reference_name):
        """Sets the repository_reference_name of this EdgestacksEdgeStackFromGitRepositoryPayload.

        Reference name of a Git repository hosting the Stack file  # noqa: E501

        :param repository_reference_name: The repository_reference_name of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: str
        """

        self._repository_reference_name = repository_reference_name

    @property
    def repository_url(self):
        """Gets the repository_url of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        URL of a Git repository hosting the Stack file  # noqa: E501

        :return: The repository_url of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this EdgestacksEdgeStackFromGitRepositoryPayload.

        URL of a Git repository hosting the Stack file  # noqa: E501

        :param repository_url: The repository_url of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")  # noqa: E501

        self._repository_url = repository_url

    @property
    def repository_username(self):
        """Gets the repository_username of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        Username used in basic authentication. Required when RepositoryAuthentication is true.  # noqa: E501

        :return: The repository_username of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._repository_username

    @repository_username.setter
    def repository_username(self, repository_username):
        """Sets the repository_username of this EdgestacksEdgeStackFromGitRepositoryPayload.

        Username used in basic authentication. Required when RepositoryAuthentication is true.  # noqa: E501

        :param repository_username: The repository_username of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: str
        """

        self._repository_username = repository_username

    @property
    def tlsskip_verify(self):
        """Gets the tlsskip_verify of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        TLSSkipVerify skips SSL verification when cloning the Git repository  # noqa: E501

        :return: The tlsskip_verify of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._tlsskip_verify

    @tlsskip_verify.setter
    def tlsskip_verify(self, tlsskip_verify):
        """Sets the tlsskip_verify of this EdgestacksEdgeStackFromGitRepositoryPayload.

        TLSSkipVerify skips SSL verification when cloning the Git repository  # noqa: E501

        :param tlsskip_verify: The tlsskip_verify of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: bool
        """

        self._tlsskip_verify = tlsskip_verify

    @property
    def use_manifest_namespaces(self):
        """Gets the use_manifest_namespaces of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501

        Uses the manifest's namespaces instead of the default one  # noqa: E501

        :return: The use_manifest_namespaces of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._use_manifest_namespaces

    @use_manifest_namespaces.setter
    def use_manifest_namespaces(self, use_manifest_namespaces):
        """Sets the use_manifest_namespaces of this EdgestacksEdgeStackFromGitRepositoryPayload.

        Uses the manifest's namespaces instead of the default one  # noqa: E501

        :param use_manifest_namespaces: The use_manifest_namespaces of this EdgestacksEdgeStackFromGitRepositoryPayload.  # noqa: E501
        :type: bool
        """

        self._use_manifest_namespaces = use_manifest_namespaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgestacksEdgeStackFromGitRepositoryPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgestacksEdgeStackFromGitRepositoryPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdgestacksEdgeStackFromGitRepositoryPayload):
            return True

        return self.to_dict() != other.to_dict()
