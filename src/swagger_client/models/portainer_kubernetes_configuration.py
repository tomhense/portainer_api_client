# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PortainerKubernetesConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_none_ingress_class': 'bool',
        'enable_resource_over_commit': 'bool',
        'ingress_availability_per_namespace': 'bool',
        'ingress_classes': 'list[PortainerKubernetesIngressClassConfig]',
        'resource_over_commit_percentage': 'int',
        'restrict_default_namespace': 'bool',
        'storage_classes': 'list[PortainerKubernetesStorageClassConfig]',
        'use_load_balancer': 'bool',
        'use_server_metrics': 'bool'
    }

    attribute_map = {
        'allow_none_ingress_class': 'AllowNoneIngressClass',
        'enable_resource_over_commit': 'EnableResourceOverCommit',
        'ingress_availability_per_namespace': 'IngressAvailabilityPerNamespace',
        'ingress_classes': 'IngressClasses',
        'resource_over_commit_percentage': 'ResourceOverCommitPercentage',
        'restrict_default_namespace': 'RestrictDefaultNamespace',
        'storage_classes': 'StorageClasses',
        'use_load_balancer': 'UseLoadBalancer',
        'use_server_metrics': 'UseServerMetrics'
    }

    def __init__(self, allow_none_ingress_class=None, enable_resource_over_commit=None, ingress_availability_per_namespace=None, ingress_classes=None, resource_over_commit_percentage=None, restrict_default_namespace=None, storage_classes=None, use_load_balancer=None, use_server_metrics=None, _configuration=None):  # noqa: E501
        """PortainerKubernetesConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_none_ingress_class = None
        self._enable_resource_over_commit = None
        self._ingress_availability_per_namespace = None
        self._ingress_classes = None
        self._resource_over_commit_percentage = None
        self._restrict_default_namespace = None
        self._storage_classes = None
        self._use_load_balancer = None
        self._use_server_metrics = None
        self.discriminator = None

        if allow_none_ingress_class is not None:
            self.allow_none_ingress_class = allow_none_ingress_class
        if enable_resource_over_commit is not None:
            self.enable_resource_over_commit = enable_resource_over_commit
        if ingress_availability_per_namespace is not None:
            self.ingress_availability_per_namespace = ingress_availability_per_namespace
        if ingress_classes is not None:
            self.ingress_classes = ingress_classes
        if resource_over_commit_percentage is not None:
            self.resource_over_commit_percentage = resource_over_commit_percentage
        if restrict_default_namespace is not None:
            self.restrict_default_namespace = restrict_default_namespace
        if storage_classes is not None:
            self.storage_classes = storage_classes
        if use_load_balancer is not None:
            self.use_load_balancer = use_load_balancer
        if use_server_metrics is not None:
            self.use_server_metrics = use_server_metrics

    @property
    def allow_none_ingress_class(self):
        """Gets the allow_none_ingress_class of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The allow_none_ingress_class of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._allow_none_ingress_class

    @allow_none_ingress_class.setter
    def allow_none_ingress_class(self, allow_none_ingress_class):
        """Sets the allow_none_ingress_class of this PortainerKubernetesConfiguration.


        :param allow_none_ingress_class: The allow_none_ingress_class of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: bool
        """

        self._allow_none_ingress_class = allow_none_ingress_class

    @property
    def enable_resource_over_commit(self):
        """Gets the enable_resource_over_commit of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The enable_resource_over_commit of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enable_resource_over_commit

    @enable_resource_over_commit.setter
    def enable_resource_over_commit(self, enable_resource_over_commit):
        """Sets the enable_resource_over_commit of this PortainerKubernetesConfiguration.


        :param enable_resource_over_commit: The enable_resource_over_commit of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: bool
        """

        self._enable_resource_over_commit = enable_resource_over_commit

    @property
    def ingress_availability_per_namespace(self):
        """Gets the ingress_availability_per_namespace of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The ingress_availability_per_namespace of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._ingress_availability_per_namespace

    @ingress_availability_per_namespace.setter
    def ingress_availability_per_namespace(self, ingress_availability_per_namespace):
        """Sets the ingress_availability_per_namespace of this PortainerKubernetesConfiguration.


        :param ingress_availability_per_namespace: The ingress_availability_per_namespace of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: bool
        """

        self._ingress_availability_per_namespace = ingress_availability_per_namespace

    @property
    def ingress_classes(self):
        """Gets the ingress_classes of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The ingress_classes of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: list[PortainerKubernetesIngressClassConfig]
        """
        return self._ingress_classes

    @ingress_classes.setter
    def ingress_classes(self, ingress_classes):
        """Sets the ingress_classes of this PortainerKubernetesConfiguration.


        :param ingress_classes: The ingress_classes of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: list[PortainerKubernetesIngressClassConfig]
        """

        self._ingress_classes = ingress_classes

    @property
    def resource_over_commit_percentage(self):
        """Gets the resource_over_commit_percentage of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The resource_over_commit_percentage of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._resource_over_commit_percentage

    @resource_over_commit_percentage.setter
    def resource_over_commit_percentage(self, resource_over_commit_percentage):
        """Sets the resource_over_commit_percentage of this PortainerKubernetesConfiguration.


        :param resource_over_commit_percentage: The resource_over_commit_percentage of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: int
        """

        self._resource_over_commit_percentage = resource_over_commit_percentage

    @property
    def restrict_default_namespace(self):
        """Gets the restrict_default_namespace of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The restrict_default_namespace of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_default_namespace

    @restrict_default_namespace.setter
    def restrict_default_namespace(self, restrict_default_namespace):
        """Sets the restrict_default_namespace of this PortainerKubernetesConfiguration.


        :param restrict_default_namespace: The restrict_default_namespace of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: bool
        """

        self._restrict_default_namespace = restrict_default_namespace

    @property
    def storage_classes(self):
        """Gets the storage_classes of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The storage_classes of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: list[PortainerKubernetesStorageClassConfig]
        """
        return self._storage_classes

    @storage_classes.setter
    def storage_classes(self, storage_classes):
        """Sets the storage_classes of this PortainerKubernetesConfiguration.


        :param storage_classes: The storage_classes of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: list[PortainerKubernetesStorageClassConfig]
        """

        self._storage_classes = storage_classes

    @property
    def use_load_balancer(self):
        """Gets the use_load_balancer of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The use_load_balancer of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._use_load_balancer

    @use_load_balancer.setter
    def use_load_balancer(self, use_load_balancer):
        """Sets the use_load_balancer of this PortainerKubernetesConfiguration.


        :param use_load_balancer: The use_load_balancer of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: bool
        """

        self._use_load_balancer = use_load_balancer

    @property
    def use_server_metrics(self):
        """Gets the use_server_metrics of this PortainerKubernetesConfiguration.  # noqa: E501


        :return: The use_server_metrics of this PortainerKubernetesConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._use_server_metrics

    @use_server_metrics.setter
    def use_server_metrics(self, use_server_metrics):
        """Sets the use_server_metrics of this PortainerKubernetesConfiguration.


        :param use_server_metrics: The use_server_metrics of this PortainerKubernetesConfiguration.  # noqa: E501
        :type: bool
        """

        self._use_server_metrics = use_server_metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerKubernetesConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerKubernetesConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerKubernetesConfiguration):
            return True

        return self.to_dict() != other.to_dict()
