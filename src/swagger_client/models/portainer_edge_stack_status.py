# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PortainerEdgeStackStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'int',
        'deployment_info': 'PortainerStackDeploymentInfo',
        'details': 'PortainerEdgeStackStatusDetails',
        'endpoint_id': 'int',
        'error': 'str',
        'ready_re_pull_image': 'bool',
        'status': 'list[PortainerEdgeStackDeploymentStatus]'
    }

    attribute_map = {
        'type': 'Type',
        'deployment_info': 'deploymentInfo',
        'details': 'details',
        'endpoint_id': 'endpointID',
        'error': 'error',
        'ready_re_pull_image': 'readyRePullImage',
        'status': 'status'
    }

    def __init__(self, type=None, deployment_info=None, details=None, endpoint_id=None, error=None, ready_re_pull_image=None, status=None, _configuration=None):  # noqa: E501
        """PortainerEdgeStackStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._deployment_info = None
        self._details = None
        self._endpoint_id = None
        self._error = None
        self._ready_re_pull_image = None
        self._status = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if deployment_info is not None:
            self.deployment_info = deployment_info
        if details is not None:
            self.details = details
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if error is not None:
            self.error = error
        if ready_re_pull_image is not None:
            self.ready_re_pull_image = ready_re_pull_image
        if status is not None:
            self.status = status

    @property
    def type(self):
        """Gets the type of this PortainerEdgeStackStatus.  # noqa: E501

        Deprecated  # noqa: E501

        :return: The type of this PortainerEdgeStackStatus.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PortainerEdgeStackStatus.

        Deprecated  # noqa: E501

        :param type: The type of this PortainerEdgeStackStatus.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def deployment_info(self):
        """Gets the deployment_info of this PortainerEdgeStackStatus.  # noqa: E501

        EE only feature  # noqa: E501

        :return: The deployment_info of this PortainerEdgeStackStatus.  # noqa: E501
        :rtype: PortainerStackDeploymentInfo
        """
        return self._deployment_info

    @deployment_info.setter
    def deployment_info(self, deployment_info):
        """Sets the deployment_info of this PortainerEdgeStackStatus.

        EE only feature  # noqa: E501

        :param deployment_info: The deployment_info of this PortainerEdgeStackStatus.  # noqa: E501
        :type: PortainerStackDeploymentInfo
        """

        self._deployment_info = deployment_info

    @property
    def details(self):
        """Gets the details of this PortainerEdgeStackStatus.  # noqa: E501

        Deprecated  # noqa: E501

        :return: The details of this PortainerEdgeStackStatus.  # noqa: E501
        :rtype: PortainerEdgeStackStatusDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PortainerEdgeStackStatus.

        Deprecated  # noqa: E501

        :param details: The details of this PortainerEdgeStackStatus.  # noqa: E501
        :type: PortainerEdgeStackStatusDetails
        """

        self._details = details

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this PortainerEdgeStackStatus.  # noqa: E501


        :return: The endpoint_id of this PortainerEdgeStackStatus.  # noqa: E501
        :rtype: int
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this PortainerEdgeStackStatus.


        :param endpoint_id: The endpoint_id of this PortainerEdgeStackStatus.  # noqa: E501
        :type: int
        """

        self._endpoint_id = endpoint_id

    @property
    def error(self):
        """Gets the error of this PortainerEdgeStackStatus.  # noqa: E501

        Deprecated  # noqa: E501

        :return: The error of this PortainerEdgeStackStatus.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PortainerEdgeStackStatus.

        Deprecated  # noqa: E501

        :param error: The error of this PortainerEdgeStackStatus.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def ready_re_pull_image(self):
        """Gets the ready_re_pull_image of this PortainerEdgeStackStatus.  # noqa: E501

        ReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image  # noqa: E501

        :return: The ready_re_pull_image of this PortainerEdgeStackStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready_re_pull_image

    @ready_re_pull_image.setter
    def ready_re_pull_image(self, ready_re_pull_image):
        """Sets the ready_re_pull_image of this PortainerEdgeStackStatus.

        ReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image  # noqa: E501

        :param ready_re_pull_image: The ready_re_pull_image of this PortainerEdgeStackStatus.  # noqa: E501
        :type: bool
        """

        self._ready_re_pull_image = ready_re_pull_image

    @property
    def status(self):
        """Gets the status of this PortainerEdgeStackStatus.  # noqa: E501


        :return: The status of this PortainerEdgeStackStatus.  # noqa: E501
        :rtype: list[PortainerEdgeStackDeploymentStatus]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PortainerEdgeStackStatus.


        :param status: The status of this PortainerEdgeStackStatus.  # noqa: E501
        :type: list[PortainerEdgeStackDeploymentStatus]
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerEdgeStackStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerEdgeStackStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerEdgeStackStatus):
            return True

        return self.to_dict() != other.to_dict()
