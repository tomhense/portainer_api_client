# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class KubernetesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_kubernetes_ingress(self, id, namespace, body, **kwargs):  # noqa: E501
        """Create a kubernetes ingress by namespace  # noqa: E501

        Create a kubernetes ingress by namespace for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kubernetes_ingress(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesK8sIngressInfo body: Ingress details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_kubernetes_ingress_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_kubernetes_ingress_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
            return data

    def create_kubernetes_ingress_with_http_info(self, id, namespace, body, **kwargs):  # noqa: E501
        """Create a kubernetes ingress by namespace  # noqa: E501

        Create a kubernetes ingress by namespace for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kubernetes_ingress_with_http_info(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesK8sIngressInfo body: Ingress details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_kubernetes_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_kubernetes_ingress`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `create_kubernetes_ingress`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_kubernetes_ingress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/ingresses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_kubernetes_namespace(self, id, body, **kwargs):  # noqa: E501
        """Create a kubernetes namespace  # noqa: E501

        Create a kubernetes namespace within the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kubernetes_namespace(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param KubernetesK8sNamespaceDetails body: Namespace configuration details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_kubernetes_namespace_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_kubernetes_namespace_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def create_kubernetes_namespace_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Create a kubernetes namespace  # noqa: E501

        Create a kubernetes namespace within the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kubernetes_namespace_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param KubernetesK8sNamespaceDetails body: Namespace configuration details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_kubernetes_namespace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_kubernetes_namespace`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_kubernetes_namespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_kubernetes_service(self, id, namespace, body, **kwargs):  # noqa: E501
        """Create a kubernetes service  # noqa: E501

        Create a kubernetes service within a given namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kubernetes_service(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesK8sServiceInfo body: Service definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_kubernetes_service_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_kubernetes_service_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
            return data

    def create_kubernetes_service_with_http_info(self, id, namespace, body, **kwargs):  # noqa: E501
        """Create a kubernetes service  # noqa: E501

        Create a kubernetes service within a given namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kubernetes_service_with_http_info(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesK8sServiceInfo body: Service definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_kubernetes_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_kubernetes_service`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `create_kubernetes_service`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_kubernetes_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/services', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_kubernetes_ingresses(self, id, body, **kwargs):  # noqa: E501
        """Delete kubernetes ingresses  # noqa: E501

        Delete kubernetes ingresses for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kubernetes_ingresses(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param KubernetesK8sIngressDeleteRequests body: Ingress details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_kubernetes_ingresses_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_kubernetes_ingresses_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def delete_kubernetes_ingresses_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Delete kubernetes ingresses  # noqa: E501

        Delete kubernetes ingresses for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kubernetes_ingresses_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param KubernetesK8sIngressDeleteRequests body: Ingress details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_kubernetes_ingresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_kubernetes_ingresses`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `delete_kubernetes_ingresses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/ingresses/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_kubernetes_namespace(self, id, namespace, **kwargs):  # noqa: E501
        """Delete kubernetes namespace  # noqa: E501

        Delete a kubernetes namespace within the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kubernetes_namespace(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_kubernetes_namespace_with_http_info(id, namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_kubernetes_namespace_with_http_info(id, namespace, **kwargs)  # noqa: E501
            return data

    def delete_kubernetes_namespace_with_http_info(self, id, namespace, **kwargs):  # noqa: E501
        """Delete kubernetes namespace  # noqa: E501

        Delete a kubernetes namespace within the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kubernetes_namespace_with_http_info(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_kubernetes_namespace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_kubernetes_namespace`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `delete_kubernetes_namespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_kubernetes_services(self, id, body, **kwargs):  # noqa: E501
        """Delete kubernetes services  # noqa: E501

        Delete the provided list of kubernetes services **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kubernetes_services(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param KubernetesK8sServiceDeleteRequests body: A map where the key is the namespace and the value is an array of services to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_kubernetes_services_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_kubernetes_services_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def delete_kubernetes_services_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Delete kubernetes services  # noqa: E501

        Delete the provided list of kubernetes services **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kubernetes_services_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param KubernetesK8sServiceDeleteRequests body: A map where the key is the namespace and the value is an array of services to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_kubernetes_services" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_kubernetes_services`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `delete_kubernetes_services`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/services/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_config(self, **kwargs):  # noqa: E501
        """Generate a kubeconfig file enabling client communication with k8s api server  # noqa: E501

        Generate a kubeconfig file enabling client communication with k8s api server **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: will include only these environments(endpoints)
        :param list[int] exclude_ids: will exclude these environments(endpoints)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_kubernetes_config_with_http_info(self, **kwargs):  # noqa: E501
        """Generate a kubeconfig file enabling client communication with k8s api server  # noqa: E501

        Generate a kubeconfig file enabling client communication with k8s api server **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: will include only these environments(endpoints)
        :param list[int] exclude_ids: will exclude these environments(endpoints)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'exclude_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'exclude_ids' in params:
            query_params.append(('excludeIds', params['exclude_ids']))  # noqa: E501
            collection_formats['excludeIds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_config_maps_and_secrets(self, id, namespace, **kwargs):  # noqa: E501
        """Get ConfigMaps and Secrets  # noqa: E501

        Get all ConfigMaps and Secrets for a given namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_config_maps_and_secrets(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :return: list[list[KubernetesK8sConfigMapOrSecret]]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_config_maps_and_secrets_with_http_info(id, namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_config_maps_and_secrets_with_http_info(id, namespace, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_config_maps_and_secrets_with_http_info(self, id, namespace, **kwargs):  # noqa: E501
        """Get ConfigMaps and Secrets  # noqa: E501

        Get all ConfigMaps and Secrets for a given namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_config_maps_and_secrets_with_http_info(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :return: list[list[KubernetesK8sConfigMapOrSecret]]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_config_maps_and_secrets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_config_maps_and_secrets`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `get_kubernetes_config_maps_and_secrets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[list[KubernetesK8sConfigMapOrSecret]]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_ingress_controllers(self, id, **kwargs):  # noqa: E501
        """Get a list of ingress controllers  # noqa: E501

        Get a list of ingress controllers for the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_ingress_controllers(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param bool allowed_only: Only return allowed ingress controllers
        :return: list[KubernetesK8sIngressController]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_ingress_controllers_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_ingress_controllers_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_ingress_controllers_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of ingress controllers  # noqa: E501

        Get a list of ingress controllers for the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_ingress_controllers_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param bool allowed_only: Only return allowed ingress controllers
        :return: list[KubernetesK8sIngressController]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'allowed_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_ingress_controllers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_ingress_controllers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'allowed_only' in params:
            query_params.append(('allowedOnly', params['allowed_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/ingresscontrollers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[KubernetesK8sIngressController]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_ingress_controllers_by_namespace(self, id, namespace, **kwargs):  # noqa: E501
        """Get a list ingress controllers by namespace  # noqa: E501

        Get a list of ingress controllers for the given environment in the provided namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_ingress_controllers_by_namespace(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :return: list[KubernetesK8sIngressController]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_ingress_controllers_by_namespace_with_http_info(id, namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_ingress_controllers_by_namespace_with_http_info(id, namespace, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_ingress_controllers_by_namespace_with_http_info(self, id, namespace, **kwargs):  # noqa: E501
        """Get a list ingress controllers by namespace  # noqa: E501

        Get a list of ingress controllers for the given environment in the provided namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_ingress_controllers_by_namespace_with_http_info(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :return: list[KubernetesK8sIngressController]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_ingress_controllers_by_namespace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_ingress_controllers_by_namespace`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `get_kubernetes_ingress_controllers_by_namespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/ingresscontrollers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[KubernetesK8sIngressController]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_ingresses(self, id, namespace, body, **kwargs):  # noqa: E501
        """Get kubernetes ingresses by namespace  # noqa: E501

        Get kubernetes ingresses by namespace for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_ingresses(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param list[KubernetesK8sIngressInfo] body: Ingress details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_ingresses_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_ingresses_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_ingresses_with_http_info(self, id, namespace, body, **kwargs):  # noqa: E501
        """Get kubernetes ingresses by namespace  # noqa: E501

        Get kubernetes ingresses by namespace for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_ingresses_with_http_info(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param list[KubernetesK8sIngressInfo] body: Ingress details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_ingresses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_ingresses`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `get_kubernetes_ingresses`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `get_kubernetes_ingresses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/ingresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_metrics_for_all_nodes(self, id, **kwargs):  # noqa: E501
        """Get a list of nodes with their live metrics  # noqa: E501

        Get a list of nodes with their live metrics **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_metrics_for_all_nodes(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :return: V1beta1NodeMetricsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_metrics_for_all_nodes_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_metrics_for_all_nodes_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_metrics_for_all_nodes_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of nodes with their live metrics  # noqa: E501

        Get a list of nodes with their live metrics **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_metrics_for_all_nodes_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :return: V1beta1NodeMetricsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_metrics_for_all_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_metrics_for_all_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/metrics/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1beta1NodeMetricsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_metrics_for_all_pods(self, id, namespace, **kwargs):  # noqa: E501
        """Get a list of pods with their live metrics  # noqa: E501

        Get a list of pods with their live metrics **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_metrics_for_all_pods(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :return: V1beta1PodMetricsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_metrics_for_all_pods_with_http_info(id, namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_metrics_for_all_pods_with_http_info(id, namespace, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_metrics_for_all_pods_with_http_info(self, id, namespace, **kwargs):  # noqa: E501
        """Get a list of pods with their live metrics  # noqa: E501

        Get a list of pods with their live metrics **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_metrics_for_all_pods_with_http_info(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :return: V1beta1PodMetricsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_metrics_for_all_pods" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_metrics_for_all_pods`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `get_kubernetes_metrics_for_all_pods`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/metrics/pods/{namespace}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1beta1PodMetricsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_metrics_for_node(self, id, name, **kwargs):  # noqa: E501
        """Get live metrics for a node  # noqa: E501

        Get live metrics for a node **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_metrics_for_node(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str name: Node identifier (required)
        :return: V1beta1NodeMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_metrics_for_node_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_metrics_for_node_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_metrics_for_node_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """Get live metrics for a node  # noqa: E501

        Get live metrics for a node **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_metrics_for_node_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str name: Node identifier (required)
        :return: V1beta1NodeMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_metrics_for_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_metrics_for_node`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_kubernetes_metrics_for_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/metrics/nodes/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1beta1NodeMetrics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_metrics_for_pod(self, id, namespace, name, **kwargs):  # noqa: E501
        """Get live metrics for a pod  # noqa: E501

        Get live metrics for a pod **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_metrics_for_pod(id, namespace, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :param str name: Pod identifier (required)
        :return: V1beta1PodMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_metrics_for_pod_with_http_info(id, namespace, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_metrics_for_pod_with_http_info(id, namespace, name, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_metrics_for_pod_with_http_info(self, id, namespace, name, **kwargs):  # noqa: E501
        """Get live metrics for a pod  # noqa: E501

        Get live metrics for a pod **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_metrics_for_pod_with_http_info(id, namespace, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :param str name: Pod identifier (required)
        :return: V1beta1PodMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_metrics_for_pod" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_metrics_for_pod`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `get_kubernetes_metrics_for_pod`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_kubernetes_metrics_for_pod`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/metrics/pods/{namespace}/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1beta1PodMetrics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_namespace(self, id, namespace, **kwargs):  # noqa: E501
        """Get kubernetes namespace details  # noqa: E501

        Get kubernetes namespace details for the provided namespace within the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_namespace(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :return: PortainerK8sNamespaceInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_namespace_with_http_info(id, namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_namespace_with_http_info(id, namespace, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_namespace_with_http_info(self, id, namespace, **kwargs):  # noqa: E501
        """Get kubernetes namespace details  # noqa: E501

        Get kubernetes namespace details for the provided namespace within the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_namespace_with_http_info(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :return: PortainerK8sNamespaceInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_namespace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_namespace`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `get_kubernetes_namespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerK8sNamespaceInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_namespaces(self, id, **kwargs):  # noqa: E501
        """Get a list of kubernetes namespaces  # noqa: E501

        Get a list of all kubernetes namespaces in the cluster **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_namespaces(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :return: dict(str, PortainerK8sNamespaceInfo)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_namespaces_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_namespaces_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_namespaces_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of kubernetes namespaces  # noqa: E501

        Get a list of all kubernetes namespaces in the cluster **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_namespaces_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :return: dict(str, PortainerK8sNamespaceInfo)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_namespaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_namespaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, PortainerK8sNamespaceInfo)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_nodes_limits(self, id, **kwargs):  # noqa: E501
        """Get CPU and memory limits of all nodes within k8s cluster  # noqa: E501

        Get CPU and memory limits of all nodes within k8s cluster **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_nodes_limits(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: PortainerK8sNodesLimits
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_nodes_limits_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_nodes_limits_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_nodes_limits_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get CPU and memory limits of all nodes within k8s cluster  # noqa: E501

        Get CPU and memory limits of all nodes within k8s cluster **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_nodes_limits_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: PortainerK8sNodesLimits
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_nodes_limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_nodes_limits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/nodes_limits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerK8sNodesLimits',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubernetes_services(self, id, namespace, **kwargs):  # noqa: E501
        """Get a list of kubernetes services for a given namespace  # noqa: E501

        Get a list of kubernetes services for a given namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_services(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param bool lookupapplications: Lookup applications associated with each service
        :return: list[KubernetesK8sServiceInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubernetes_services_with_http_info(id, namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubernetes_services_with_http_info(id, namespace, **kwargs)  # noqa: E501
            return data

    def get_kubernetes_services_with_http_info(self, id, namespace, **kwargs):  # noqa: E501
        """Get a list of kubernetes services for a given namespace  # noqa: E501

        Get a list of kubernetes services for a given namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubernetes_services_with_http_info(id, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param bool lookupapplications: Lookup applications associated with each service
        :return: list[KubernetesK8sServiceInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'lookupapplications']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubernetes_services" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_kubernetes_services`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `get_kubernetes_services`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []
        if 'lookupapplications' in params:
            query_params.append(('lookupapplications', params['lookupapplications']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[KubernetesK8sServiceInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kubernetes_namespaces_toggle_system(self, id, namespace, body, **kwargs):  # noqa: E501
        """Toggle the system state for a namespace  # noqa: E501

        Toggle the system state for a namespace **Access policy**: administrator or environment(endpoint) admin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kubernetes_namespaces_toggle_system(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesNamespacesToggleSystemPayload body: Update details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kubernetes_namespaces_toggle_system_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.kubernetes_namespaces_toggle_system_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
            return data

    def kubernetes_namespaces_toggle_system_with_http_info(self, id, namespace, body, **kwargs):  # noqa: E501
        """Toggle the system state for a namespace  # noqa: E501

        Toggle the system state for a namespace **Access policy**: administrator or environment(endpoint) admin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kubernetes_namespaces_toggle_system_with_http_info(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesNamespacesToggleSystemPayload body: Update details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kubernetes_namespaces_toggle_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `kubernetes_namespaces_toggle_system`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `kubernetes_namespaces_toggle_system`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `kubernetes_namespaces_toggle_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/system', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_kubernetes_ingress(self, id, namespace, body, **kwargs):  # noqa: E501
        """Update kubernetes ingress rule  # noqa: E501

        Update kubernetes ingress rule for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_ingress(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesK8sIngressInfo body: Ingress details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_kubernetes_ingress_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_kubernetes_ingress_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
            return data

    def update_kubernetes_ingress_with_http_info(self, id, namespace, body, **kwargs):  # noqa: E501
        """Update kubernetes ingress rule  # noqa: E501

        Update kubernetes ingress rule for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_ingress_with_http_info(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesK8sIngressInfo body: Ingress details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_kubernetes_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_kubernetes_ingress`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `update_kubernetes_ingress`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_kubernetes_ingress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/ingresses', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_kubernetes_ingress_controllers(self, id, body, **kwargs):  # noqa: E501
        """Update (block/unblock) ingress controllers  # noqa: E501

        Update (block/unblock) ingress controllers **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_ingress_controllers(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param list[list[KubernetesK8sIngressController]] body: Ingress controllers (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_kubernetes_ingress_controllers_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_kubernetes_ingress_controllers_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def update_kubernetes_ingress_controllers_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update (block/unblock) ingress controllers  # noqa: E501

        Update (block/unblock) ingress controllers **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_ingress_controllers_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param list[list[KubernetesK8sIngressController]] body: Ingress controllers (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_kubernetes_ingress_controllers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_kubernetes_ingress_controllers`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_kubernetes_ingress_controllers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/ingresscontrollers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_kubernetes_ingress_controllers_by_namespace(self, id, namespace, body, **kwargs):  # noqa: E501
        """Update (block/unblock) ingress controllers by namespace  # noqa: E501

        Update (block/unblock) ingress controllers by namespace for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_ingress_controllers_by_namespace(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param list[list[KubernetesK8sIngressController]] body: Ingress controllers (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_kubernetes_ingress_controllers_by_namespace_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_kubernetes_ingress_controllers_by_namespace_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
            return data

    def update_kubernetes_ingress_controllers_by_namespace_with_http_info(self, id, namespace, body, **kwargs):  # noqa: E501
        """Update (block/unblock) ingress controllers by namespace  # noqa: E501

        Update (block/unblock) ingress controllers by namespace for the provided environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_ingress_controllers_by_namespace_with_http_info(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param list[list[KubernetesK8sIngressController]] body: Ingress controllers (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_kubernetes_ingress_controllers_by_namespace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_kubernetes_ingress_controllers_by_namespace`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `update_kubernetes_ingress_controllers_by_namespace`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_kubernetes_ingress_controllers_by_namespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/ingresscontrollers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_kubernetes_namespace(self, id, namespace, body, **kwargs):  # noqa: E501
        """Updates a kubernetes namespace  # noqa: E501

        Update a kubernetes namespace within the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_namespace(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :param KubernetesK8sNamespaceDetails body: Namespace details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_kubernetes_namespace_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_kubernetes_namespace_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
            return data

    def update_kubernetes_namespace_with_http_info(self, id, namespace, body, **kwargs):  # noqa: E501
        """Updates a kubernetes namespace  # noqa: E501

        Update a kubernetes namespace within the given environment **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_namespace_with_http_info(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace (required)
        :param KubernetesK8sNamespaceDetails body: Namespace details (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_kubernetes_namespace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_kubernetes_namespace`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `update_kubernetes_namespace`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_kubernetes_namespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_kubernetes_service(self, id, namespace, body, **kwargs):  # noqa: E501
        """Update a kubernetes service  # noqa: E501

        Update a kubernetes service within a given namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_service(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesK8sServiceInfo body: Service definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_kubernetes_service_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_kubernetes_service_with_http_info(id, namespace, body, **kwargs)  # noqa: E501
            return data

    def update_kubernetes_service_with_http_info(self, id, namespace, body, **kwargs):  # noqa: E501
        """Update a kubernetes service  # noqa: E501

        Update a kubernetes service within a given namespace **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_service_with_http_info(id, namespace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment (Endpoint) identifier (required)
        :param str namespace: Namespace name (required)
        :param KubernetesK8sServiceInfo body: Service definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_kubernetes_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_kubernetes_service`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if self.api_client.client_side_validation and ('namespace' not in params or
                                                       params['namespace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `namespace` when calling `update_kubernetes_service`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_kubernetes_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/kubernetes/{id}/namespaces/{namespace}/services', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
