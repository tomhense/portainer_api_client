# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EdgeStacksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def edge_stack_create(self, method, body, **kwargs):  # noqa: E501
        """Create an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_create(method, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str method: Creation Method (required)
        :param object body: for body documentation see the relevant /edge_stacks/create/{method} endpoint (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_create_with_http_info(method, body, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_create_with_http_info(method, body, **kwargs)  # noqa: E501
            return data

    def edge_stack_create_with_http_info(self, method, body, **kwargs):  # noqa: E501
        """Create an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_create_with_http_info(method, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str method: Creation Method (required)
        :param object body: for body documentation see the relevant /edge_stacks/create/{method} endpoint (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['method', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'method' is set
        if self.api_client.client_side_validation and ('method' not in params or
                                                       params['method'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `method` when calling `edge_stack_create`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `edge_stack_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEdgeStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_create_file(self, name, file, edge_groups, deployment_type, **kwargs):  # noqa: E501
        """Create an EdgeStack from file  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_create_file(name, file, edge_groups, deployment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the stack (required)
        :param file file: Content of the Stack file (required)
        :param str edge_groups: JSON stringified array of Edge Groups ids (required)
        :param int deployment_type: deploy type 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad' (required)
        :param str registries: JSON stringified array of Registry ids to use for this stack
        :param bool use_manifest_namespaces: Uses the manifest's namespaces instead of the default one, relevant only for kube environments
        :param bool pre_pull_image: Pre Pull image
        :param bool retry_deploy: Retry deploy
        :param str dryrun: if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_create_file_with_http_info(name, file, edge_groups, deployment_type, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_create_file_with_http_info(name, file, edge_groups, deployment_type, **kwargs)  # noqa: E501
            return data

    def edge_stack_create_file_with_http_info(self, name, file, edge_groups, deployment_type, **kwargs):  # noqa: E501
        """Create an EdgeStack from file  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_create_file_with_http_info(name, file, edge_groups, deployment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the stack (required)
        :param file file: Content of the Stack file (required)
        :param str edge_groups: JSON stringified array of Edge Groups ids (required)
        :param int deployment_type: deploy type 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad' (required)
        :param str registries: JSON stringified array of Registry ids to use for this stack
        :param bool use_manifest_namespaces: Uses the manifest's namespaces instead of the default one, relevant only for kube environments
        :param bool pre_pull_image: Pre Pull image
        :param bool retry_deploy: Retry deploy
        :param str dryrun: if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'file', 'edge_groups', 'deployment_type', 'registries', 'use_manifest_namespaces', 'pre_pull_image', 'retry_deploy', 'dryrun']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_create_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `edge_stack_create_file`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `edge_stack_create_file`")  # noqa: E501
        # verify the required parameter 'edge_groups' is set
        if self.api_client.client_side_validation and ('edge_groups' not in params or
                                                       params['edge_groups'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `edge_groups` when calling `edge_stack_create_file`")  # noqa: E501
        # verify the required parameter 'deployment_type' is set
        if self.api_client.client_side_validation and ('deployment_type' not in params or
                                                       params['deployment_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `deployment_type` when calling `edge_stack_create_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dryrun' in params:
            query_params.append(('dryrun', params['dryrun']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'edge_groups' in params:
            form_params.append(('EdgeGroups', params['edge_groups']))  # noqa: E501
        if 'deployment_type' in params:
            form_params.append(('DeploymentType', params['deployment_type']))  # noqa: E501
        if 'registries' in params:
            form_params.append(('Registries', params['registries']))  # noqa: E501
        if 'use_manifest_namespaces' in params:
            form_params.append(('UseManifestNamespaces', params['use_manifest_namespaces']))  # noqa: E501
        if 'pre_pull_image' in params:
            form_params.append(('PrePullImage', params['pre_pull_image']))  # noqa: E501
        if 'retry_deploy' in params:
            form_params.append(('RetryDeploy', params['retry_deploy']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/create/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEdgeStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_create_repository(self, body, **kwargs):  # noqa: E501
        """Create an EdgeStack from a git repository  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_create_repository(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgestacksEdgeStackFromGitRepositoryPayload body: stack config (required)
        :param str dryrun: if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_create_repository_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_create_repository_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def edge_stack_create_repository_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an EdgeStack from a git repository  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_create_repository_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgestacksEdgeStackFromGitRepositoryPayload body: stack config (required)
        :param str dryrun: if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dryrun']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_create_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `edge_stack_create_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dryrun' in params:
            query_params.append(('dryrun', params['dryrun']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/create/repository', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEdgeStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_create_string(self, body, **kwargs):  # noqa: E501
        """Create an EdgeStack from a text  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_create_string(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgestacksEdgeStackFromStringPayload body: stack config (required)
        :param str dryrun: if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_create_string_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_create_string_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def edge_stack_create_string_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an EdgeStack from a text  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_create_string_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgestacksEdgeStackFromStringPayload body: stack config (required)
        :param str dryrun: if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dryrun']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_create_string" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `edge_stack_create_string`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dryrun' in params:
            query_params.append(('dryrun', params['dryrun']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/create/string', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEdgeStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_delete(self, id, **kwargs):  # noqa: E501
        """Delete an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def edge_stack_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edge_stack_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_file(self, id, **kwargs):  # noqa: E501
        """Fetches the stack file for an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_file(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :return: EdgestacksStackFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_file_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_file_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def edge_stack_file_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetches the stack file for an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_file_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :return: EdgestacksStackFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edge_stack_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/{id}/file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgestacksStackFileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_inspect(self, id, **kwargs):  # noqa: E501
        """Inspect an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_inspect(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_inspect_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_inspect_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def edge_stack_inspect_with_http_info(self, id, **kwargs):  # noqa: E501
        """Inspect an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_inspect_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_inspect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edge_stack_inspect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEdgeStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_list(self, **kwargs):  # noqa: E501
        """Fetches the list of EdgeStacks  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PortainerEdgeStack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def edge_stack_list_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches the list of EdgeStacks  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PortainerEdgeStack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortainerEdgeStack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_status_delete(self, id, environment_id, **kwargs):  # noqa: E501
        """Delete an EdgeStack status  # noqa: E501

        Authorized only if the request is done by an Edge Environment(Endpoint)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_status_delete(id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :param int environment_id: Environment identifier (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_status_delete_with_http_info(id, environment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_status_delete_with_http_info(id, environment_id, **kwargs)  # noqa: E501
            return data

    def edge_stack_status_delete_with_http_info(self, id, environment_id, **kwargs):  # noqa: E501
        """Delete an EdgeStack status  # noqa: E501

        Authorized only if the request is done by an Edge Environment(Endpoint)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_status_delete_with_http_info(id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :param int environment_id: Environment identifier (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'environment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_status_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edge_stack_status_delete`")  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and ('environment_id' not in params or
                                                       params['environment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `environment_id` when calling `edge_stack_status_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'environment_id' in params:
            path_params['environmentId'] = params['environment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/{id}/status/{environmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEdgeStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_status_update(self, id, body, **kwargs):  # noqa: E501
        """Update an EdgeStack status  # noqa: E501

        Authorized only if the request is done by an Edge Environment(Endpoint)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_status_update(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :param EdgestacksUpdateStatusPayload body: EdgeStack status payload (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_status_update_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_status_update_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def edge_stack_status_update_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update an EdgeStack status  # noqa: E501

        Authorized only if the request is done by an Edge Environment(Endpoint)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_status_update_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :param EdgestacksUpdateStatusPayload body: EdgeStack status payload (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_status_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edge_stack_status_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `edge_stack_status_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/{id}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEdgeStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edge_stack_update(self, id, body, **kwargs):  # noqa: E501
        """Update an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_update(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :param EdgestacksUpdateEdgeStackPayload body: EdgeStack data (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edge_stack_update_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.edge_stack_update_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def edge_stack_update_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update an EdgeStack  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edge_stack_update_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: EdgeStack Id (required)
        :param EdgestacksUpdateEdgeStackPayload body: EdgeStack data (required)
        :return: PortainerEdgeStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_stack_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edge_stack_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `edge_stack_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/edge_stacks/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEdgeStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_id_edge_stacks_stack_id_get(self, id, stack_id, **kwargs):  # noqa: E501
        """Inspect an Edge Stack for an Environment(Endpoint)  # noqa: E501

        **Access policy**: public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_stacks_stack_id_get(id, stack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: environment(endpoint) Id (required)
        :param int stack_id: EdgeStack Id (required)
        :return: EdgeStackPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, **kwargs)  # noqa: E501
            return data

    def endpoints_id_edge_stacks_stack_id_get_with_http_info(self, id, stack_id, **kwargs):  # noqa: E501
        """Inspect an Edge Stack for an Environment(Endpoint)  # noqa: E501

        **Access policy**: public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: environment(endpoint) Id (required)
        :param int stack_id: EdgeStack Id (required)
        :return: EdgeStackPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'stack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_id_edge_stacks_stack_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoints_id_edge_stacks_stack_id_get`")  # noqa: E501
        # verify the required parameter 'stack_id' is set
        if self.api_client.client_side_validation and ('stack_id' not in params or
                                                       params['stack_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stack_id` when calling `endpoints_id_edge_stacks_stack_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'stack_id' in params:
            path_params['stackId'] = params['stack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/edge/stacks/{stackId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeStackPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
