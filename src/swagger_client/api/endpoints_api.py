# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  # Private Registry  Using private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\". \\<registryID value\\> - The registry ID where the repository was created.  Example:  ``` eyJyZWdpc3RyeUlkIjoxfQ== ```  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.21.5
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EndpointsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def endpoint_association_delete(self, id, **kwargs):  # noqa: E501
        """De-association an edge environment(endpoint)  # noqa: E501

        De-association an edge environment(endpoint). **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_association_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_association_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_association_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_association_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """De-association an edge environment(endpoint)  # noqa: E501

        De-association an edge environment(endpoint). **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_association_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_association_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_association_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/association', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_create(self, name, endpoint_creation_type, edge_tunnel_server_address, **kwargs):  # noqa: E501
        """Create a new environment(endpoint)  # noqa: E501

        Create a new environment(endpoint) that will be used to manage an environment(endpoint). **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_create(name, endpoint_creation_type, edge_tunnel_server_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name that will be used to identify this environment(endpoint) (example: my-environment) (required)
        :param int endpoint_creation_type: Environment(Endpoint) type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment) (required)
        :param str edge_tunnel_server_address: URL or IP address that will be used to establish a reverse tunnel (required)
        :param str url: URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine). Cannot be empty if EndpointCreationType is set to 4 (Edge agent environment)
        :param str public_url: URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)
        :param int group_id: Environment(Endpoint) group identifier. If not specified will default to 1 (unassigned).
        :param bool tls: Require TLS to connect against this environment(endpoint). Must be true if EndpointCreationType is set to 2 (Agent environment)
        :param bool tls_skip_verify: Skip server verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)
        :param bool tls_skip_client_verify: Skip client verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)
        :param file tlsca_cert_file: TLS CA certificate file
        :param file tls_cert_file: TLS client certificate file
        :param file tls_key_file: TLS client key file
        :param str azure_application_id: Azure application ID. Required if environment(endpoint) type is set to 3
        :param str azure_tenant_id: Azure tenant ID. Required if environment(endpoint) type is set to 3
        :param str azure_authentication_key: Azure authentication key. Required if environment(endpoint) type is set to 3
        :param list[int] tag_ids: List of tag identifiers to which this environment(endpoint) is associated
        :param int edge_checkin_interval: The check in interval for edge agent (in seconds)
        :param str gpus: List of GPUs - json stringified array of {name, value} structs
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_create_with_http_info(name, endpoint_creation_type, edge_tunnel_server_address, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_create_with_http_info(name, endpoint_creation_type, edge_tunnel_server_address, **kwargs)  # noqa: E501
            return data

    def endpoint_create_with_http_info(self, name, endpoint_creation_type, edge_tunnel_server_address, **kwargs):  # noqa: E501
        """Create a new environment(endpoint)  # noqa: E501

        Create a new environment(endpoint) that will be used to manage an environment(endpoint). **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_create_with_http_info(name, endpoint_creation_type, edge_tunnel_server_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name that will be used to identify this environment(endpoint) (example: my-environment) (required)
        :param int endpoint_creation_type: Environment(Endpoint) type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment) (required)
        :param str edge_tunnel_server_address: URL or IP address that will be used to establish a reverse tunnel (required)
        :param str url: URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine). Cannot be empty if EndpointCreationType is set to 4 (Edge agent environment)
        :param str public_url: URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)
        :param int group_id: Environment(Endpoint) group identifier. If not specified will default to 1 (unassigned).
        :param bool tls: Require TLS to connect against this environment(endpoint). Must be true if EndpointCreationType is set to 2 (Agent environment)
        :param bool tls_skip_verify: Skip server verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)
        :param bool tls_skip_client_verify: Skip client verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)
        :param file tlsca_cert_file: TLS CA certificate file
        :param file tls_cert_file: TLS client certificate file
        :param file tls_key_file: TLS client key file
        :param str azure_application_id: Azure application ID. Required if environment(endpoint) type is set to 3
        :param str azure_tenant_id: Azure tenant ID. Required if environment(endpoint) type is set to 3
        :param str azure_authentication_key: Azure authentication key. Required if environment(endpoint) type is set to 3
        :param list[int] tag_ids: List of tag identifiers to which this environment(endpoint) is associated
        :param int edge_checkin_interval: The check in interval for edge agent (in seconds)
        :param str gpus: List of GPUs - json stringified array of {name, value} structs
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'endpoint_creation_type', 'edge_tunnel_server_address', 'url', 'public_url', 'group_id', 'tls', 'tls_skip_verify', 'tls_skip_client_verify', 'tlsca_cert_file', 'tls_cert_file', 'tls_key_file', 'azure_application_id', 'azure_tenant_id', 'azure_authentication_key', 'tag_ids', 'edge_checkin_interval', 'gpus']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `endpoint_create`")  # noqa: E501
        # verify the required parameter 'endpoint_creation_type' is set
        if self.api_client.client_side_validation and ('endpoint_creation_type' not in params or
                                                       params['endpoint_creation_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_creation_type` when calling `endpoint_create`")  # noqa: E501
        # verify the required parameter 'edge_tunnel_server_address' is set
        if self.api_client.client_side_validation and ('edge_tunnel_server_address' not in params or
                                                       params['edge_tunnel_server_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `edge_tunnel_server_address` when calling `endpoint_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'endpoint_creation_type' in params:
            form_params.append(('EndpointCreationType', params['endpoint_creation_type']))  # noqa: E501
        if 'url' in params:
            form_params.append(('URL', params['url']))  # noqa: E501
        if 'public_url' in params:
            form_params.append(('PublicURL', params['public_url']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('GroupID', params['group_id']))  # noqa: E501
        if 'tls' in params:
            form_params.append(('TLS', params['tls']))  # noqa: E501
        if 'tls_skip_verify' in params:
            form_params.append(('TLSSkipVerify', params['tls_skip_verify']))  # noqa: E501
        if 'tls_skip_client_verify' in params:
            form_params.append(('TLSSkipClientVerify', params['tls_skip_client_verify']))  # noqa: E501
        if 'tlsca_cert_file' in params:
            local_var_files['TLSCACertFile'] = params['tlsca_cert_file']  # noqa: E501
        if 'tls_cert_file' in params:
            local_var_files['TLSCertFile'] = params['tls_cert_file']  # noqa: E501
        if 'tls_key_file' in params:
            local_var_files['TLSKeyFile'] = params['tls_key_file']  # noqa: E501
        if 'azure_application_id' in params:
            form_params.append(('AzureApplicationID', params['azure_application_id']))  # noqa: E501
        if 'azure_tenant_id' in params:
            form_params.append(('AzureTenantID', params['azure_tenant_id']))  # noqa: E501
        if 'azure_authentication_key' in params:
            form_params.append(('AzureAuthenticationKey', params['azure_authentication_key']))  # noqa: E501
        if 'tag_ids' in params:
            form_params.append(('TagIds', params['tag_ids']))  # noqa: E501
            collection_formats['TagIds'] = 'multi'  # noqa: E501
        if 'edge_checkin_interval' in params:
            form_params.append(('EdgeCheckinInterval', params['edge_checkin_interval']))  # noqa: E501
        if 'edge_tunnel_server_address' in params:
            form_params.append(('EdgeTunnelServerAddress', params['edge_tunnel_server_address']))  # noqa: E501
        if 'gpus' in params:
            form_params.append(('Gpus', params['gpus']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_create_global_key(self, **kwargs):  # noqa: E501
        """Create or retrieve the endpoint for an EdgeID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_create_global_key(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EndpointsEndpointCreateGlobalKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_create_global_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_create_global_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def endpoint_create_global_key_with_http_info(self, **kwargs):  # noqa: E501
        """Create or retrieve the endpoint for an EdgeID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_create_global_key_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EndpointsEndpointCreateGlobalKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_create_global_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/global-key', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsEndpointCreateGlobalKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_delete(self, id, **kwargs):  # noqa: E501
        """Remove an environment  # noqa: E501

        Remove the environment associated to the specified identifier and optionally clean-up associated resources. **Access policy**: Administrator only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove an environment  # noqa: E501

        Remove the environment associated to the specified identifier and optionally clean-up associated resources. **Access policy**: Administrator only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_delete_batch(self, body, **kwargs):  # noqa: E501
        """Remove multiple environments  # noqa: E501

        Remove multiple environments and optionally clean-up associated resources. **Access policy**: Administrator only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_delete_batch(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndpointsEndpointDeleteBatchPayload body: List of environments to delete, with optional deleteCluster flag to clean-up assocaited resources (cloud environments only) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_delete_batch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_delete_batch_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def endpoint_delete_batch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Remove multiple environments  # noqa: E501

        Remove multiple environments and optionally clean-up associated resources. **Access policy**: Administrator only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_delete_batch_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndpointsEndpointDeleteBatchPayload body: List of environments to delete, with optional deleteCluster flag to clean-up assocaited resources (cloud environments only) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_delete_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `endpoint_delete_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_dockerhub_status(self, id, registry_id, **kwargs):  # noqa: E501
        """fetch docker pull limits  # noqa: E501

        get docker pull limits for a docker hub registry in the environment **Access policy**:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_dockerhub_status(id, registry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: endpoint ID (required)
        :param int registry_id: registry ID (required)
        :return: EndpointsDockerhubStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_dockerhub_status_with_http_info(id, registry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_dockerhub_status_with_http_info(id, registry_id, **kwargs)  # noqa: E501
            return data

    def endpoint_dockerhub_status_with_http_info(self, id, registry_id, **kwargs):  # noqa: E501
        """fetch docker pull limits  # noqa: E501

        get docker pull limits for a docker hub registry in the environment **Access policy**:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_dockerhub_status_with_http_info(id, registry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: endpoint ID (required)
        :param int registry_id: registry ID (required)
        :return: EndpointsDockerhubStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'registry_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_dockerhub_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_dockerhub_status`")  # noqa: E501
        # verify the required parameter 'registry_id' is set
        if self.api_client.client_side_validation and ('registry_id' not in params or
                                                       params['registry_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `registry_id` when calling `endpoint_dockerhub_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'registry_id' in params:
            path_params['registryId'] = params['registry_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/dockerhub/{registryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsDockerhubStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_edge_status_inspect(self, id, **kwargs):  # noqa: E501
        """Get environment(endpoint) status  # noqa: E501

        environment(endpoint) for edge agent to check status of environment(endpoint) **Access policy**: restricted only to Edge environments(endpoints)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_edge_status_inspect(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: EndpointedgeEndpointEdgeStatusInspectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_edge_status_inspect_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_edge_status_inspect_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_edge_status_inspect_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get environment(endpoint) status  # noqa: E501

        environment(endpoint) for edge agent to check status of environment(endpoint) **Access policy**: restricted only to Edge environments(endpoints)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_edge_status_inspect_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: EndpointedgeEndpointEdgeStatusInspectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_edge_status_inspect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_edge_status_inspect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/edge/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointedgeEndpointEdgeStatusInspectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_force_update_service(self, id, body, **kwargs):  # noqa: E501
        """force update a docker service  # noqa: E501

        force update a docker service **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_force_update_service(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: endpoint identifier (required)
        :param EndpointsForceUpdateServicePayload body: details (required)
        :return: SwarmServiceUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_force_update_service_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_force_update_service_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def endpoint_force_update_service_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """force update a docker service  # noqa: E501

        force update a docker service **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_force_update_service_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: endpoint identifier (required)
        :param EndpointsForceUpdateServicePayload body: details (required)
        :return: SwarmServiceUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_force_update_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_force_update_service`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `endpoint_force_update_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/forceupdateservice', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SwarmServiceUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_inspect(self, id, **kwargs):  # noqa: E501
        """Inspect an environment(endpoint)  # noqa: E501

        Retrieve details about an environment(endpoint). **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_inspect(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_inspect_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_inspect_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_inspect_with_http_info(self, id, **kwargs):  # noqa: E501
        """Inspect an environment(endpoint)  # noqa: E501

        Retrieve details about an environment(endpoint). **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_inspect_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_inspect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_inspect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_list(self, **kwargs):  # noqa: E501
        """List environments(endpoints)  # noqa: E501

        List all environments(endpoints) based on the current user authorizations. Will return all environments(endpoints) if using an administrator or team leader account otherwise it will only return authorized environments(endpoints). **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start searching from
        :param int limit: Limit results to this value
        :param int order: Order sorted results by desc/asc
        :param str search: Search query
        :param list[int] group_ids: List environments(endpoints) of these groups
        :param list[int] status: List environments(endpoints) by this status
        :param list[int] types: List environments(endpoints) of this type
        :param list[int] tag_ids: search environments(endpoints) with these tags (depends on tagsPartialMatch)
        :param bool tags_partial_match: If true, will return environment(endpoint) which has one of tagIds, if false (or missing) will return only environments(endpoints) that has all the tags
        :param list[int] endpoint_ids: will return only these environments(endpoints)
        :param bool provisioned: If true, will return environment(endpoint) that were provisioned
        :param list[str] agent_versions: will return only environments with on of these agent versions
        :param bool edge_async: if exists true show only edge async agents, false show only standard edge agents. if missing, will show both types (relevant only for edge agents)
        :param bool edge_device_untrusted: if true, show only untrusted edge agents, if false show only trusted edge agents (relevant only for edge agents)
        :param float edge_check_in_passed_seconds: if bigger then zero, show only edge agents that checked-in in the last provided seconds (relevant only for edge agents)
        :param bool exclude_snapshots: if true, the snapshot data won't be retrieved
        :param str name: will return only environments(endpoints) with this name
        :param str edge_stack_status: only applied when edgeStackId exists. Filter the returned environments based on their deployment status in the stack (not the environment status!)
        :return: list[PortainerEndpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def endpoint_list_with_http_info(self, **kwargs):  # noqa: E501
        """List environments(endpoints)  # noqa: E501

        List all environments(endpoints) based on the current user authorizations. Will return all environments(endpoints) if using an administrator or team leader account otherwise it will only return authorized environments(endpoints). **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start searching from
        :param int limit: Limit results to this value
        :param int order: Order sorted results by desc/asc
        :param str search: Search query
        :param list[int] group_ids: List environments(endpoints) of these groups
        :param list[int] status: List environments(endpoints) by this status
        :param list[int] types: List environments(endpoints) of this type
        :param list[int] tag_ids: search environments(endpoints) with these tags (depends on tagsPartialMatch)
        :param bool tags_partial_match: If true, will return environment(endpoint) which has one of tagIds, if false (or missing) will return only environments(endpoints) that has all the tags
        :param list[int] endpoint_ids: will return only these environments(endpoints)
        :param bool provisioned: If true, will return environment(endpoint) that were provisioned
        :param list[str] agent_versions: will return only environments with on of these agent versions
        :param bool edge_async: if exists true show only edge async agents, false show only standard edge agents. if missing, will show both types (relevant only for edge agents)
        :param bool edge_device_untrusted: if true, show only untrusted edge agents, if false show only trusted edge agents (relevant only for edge agents)
        :param float edge_check_in_passed_seconds: if bigger then zero, show only edge agents that checked-in in the last provided seconds (relevant only for edge agents)
        :param bool exclude_snapshots: if true, the snapshot data won't be retrieved
        :param str name: will return only environments(endpoints) with this name
        :param str edge_stack_status: only applied when edgeStackId exists. Filter the returned environments based on their deployment status in the stack (not the environment status!)
        :return: list[PortainerEndpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'limit', 'order', 'search', 'group_ids', 'status', 'types', 'tag_ids', 'tags_partial_match', 'endpoint_ids', 'provisioned', 'agent_versions', 'edge_async', 'edge_device_untrusted', 'edge_check_in_passed_seconds', 'exclude_snapshots', 'name', 'edge_stack_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'group_ids' in params:
            query_params.append(('groupIds', params['group_ids']))  # noqa: E501
            collection_formats['groupIds'] = 'multi'  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'multi'  # noqa: E501
        if 'types' in params:
            query_params.append(('types', params['types']))  # noqa: E501
            collection_formats['types'] = 'multi'  # noqa: E501
        if 'tag_ids' in params:
            query_params.append(('tagIds', params['tag_ids']))  # noqa: E501
            collection_formats['tagIds'] = 'multi'  # noqa: E501
        if 'tags_partial_match' in params:
            query_params.append(('tagsPartialMatch', params['tags_partial_match']))  # noqa: E501
        if 'endpoint_ids' in params:
            query_params.append(('endpointIds', params['endpoint_ids']))  # noqa: E501
            collection_formats['endpointIds'] = 'multi'  # noqa: E501
        if 'provisioned' in params:
            query_params.append(('provisioned', params['provisioned']))  # noqa: E501
        if 'agent_versions' in params:
            query_params.append(('agentVersions', params['agent_versions']))  # noqa: E501
            collection_formats['agentVersions'] = 'multi'  # noqa: E501
        if 'edge_async' in params:
            query_params.append(('edgeAsync', params['edge_async']))  # noqa: E501
        if 'edge_device_untrusted' in params:
            query_params.append(('edgeDeviceUntrusted', params['edge_device_untrusted']))  # noqa: E501
        if 'edge_check_in_passed_seconds' in params:
            query_params.append(('edgeCheckInPassedSeconds', params['edge_check_in_passed_seconds']))  # noqa: E501
        if 'exclude_snapshots' in params:
            query_params.append(('excludeSnapshots', params['exclude_snapshots']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'edge_stack_status' in params:
            query_params.append(('edgeStackStatus', params['edge_stack_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortainerEndpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_registries_list(self, id, **kwargs):  # noqa: E501
        """List Registries on environment  # noqa: E501

        List all registries based on the current user authorizations in current environment. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_registries_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param str namespace: required if kubernetes environment, will show registries by namespace
        :return: list[PortainerRegistry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_registries_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_registries_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_registries_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """List Registries on environment  # noqa: E501

        List all registries based on the current user authorizations in current environment. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_registries_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param str namespace: required if kubernetes environment, will show registries by namespace
        :return: list[PortainerRegistry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_registries_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_registries_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'namespace' in params:
            query_params.append(('namespace', params['namespace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/registries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortainerRegistry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_registry_access(self, id, registry_id, body, **kwargs):  # noqa: E501
        """update registry access for environment  # noqa: E501

        **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_registry_access(id, registry_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param int registry_id: Registry identifier (required)
        :param EndpointsRegistryAccessPayload body: details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_registry_access_with_http_info(id, registry_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_registry_access_with_http_info(id, registry_id, body, **kwargs)  # noqa: E501
            return data

    def endpoint_registry_access_with_http_info(self, id, registry_id, body, **kwargs):  # noqa: E501
        """update registry access for environment  # noqa: E501

        **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_registry_access_with_http_info(id, registry_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param int registry_id: Registry identifier (required)
        :param EndpointsRegistryAccessPayload body: details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'registry_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_registry_access" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_registry_access`")  # noqa: E501
        # verify the required parameter 'registry_id' is set
        if self.api_client.client_side_validation and ('registry_id' not in params or
                                                       params['registry_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `registry_id` when calling `endpoint_registry_access`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `endpoint_registry_access`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'registry_id' in params:
            path_params['registryId'] = params['registry_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/registries/{registryId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_settings_update(self, id, body, **kwargs):  # noqa: E501
        """Update settings for an environment(endpoint)  # noqa: E501

        Update settings for an environment(endpoint). **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_settings_update(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param EndpointsEndpointSettingsUpdatePayload body: Environment(Endpoint) details (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_settings_update_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_settings_update_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def endpoint_settings_update_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update settings for an environment(endpoint)  # noqa: E501

        Update settings for an environment(endpoint). **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_settings_update_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param EndpointsEndpointSettingsUpdatePayload body: Environment(Endpoint) details (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_settings_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_settings_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `endpoint_settings_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_snapshot(self, id, **kwargs):  # noqa: E501
        """Snapshots an environment(endpoint)  # noqa: E501

        Snapshots an environment(endpoint) **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_snapshot(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_snapshot_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_snapshot_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_snapshot_with_http_info(self, id, **kwargs):  # noqa: E501
        """Snapshots an environment(endpoint)  # noqa: E501

        Snapshots an environment(endpoint) **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_snapshot_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/snapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_snapshots(self, **kwargs):  # noqa: E501
        """Snapshot all environments(endpoints)  # noqa: E501

        Snapshot all environments(endpoints) **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_snapshots(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_snapshots_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_snapshots_with_http_info(**kwargs)  # noqa: E501
            return data

    def endpoint_snapshots_with_http_info(self, **kwargs):  # noqa: E501
        """Snapshot all environments(endpoints)  # noqa: E501

        Snapshot all environments(endpoints) **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_snapshots_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_snapshots" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/snapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_update(self, id, body, **kwargs):  # noqa: E501
        """Update an environment(endpoint)  # noqa: E501

        Update an environment(endpoint). **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_update(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param EndpointsEndpointUpdatePayload body: Environment(Endpoint) details (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_update_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_update_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def endpoint_update_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update an environment(endpoint)  # noqa: E501

        Update an environment(endpoint). **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_update_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param EndpointsEndpointUpdatePayload body: Environment(Endpoint) details (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `endpoint_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_update_relations(self, body, **kwargs):  # noqa: E501
        """Update relations for a list of environments  # noqa: E501

        Update relations for a list of environments Edge groups, tags and environment group can be updated.  **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_update_relations(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndpointsEndpointUpdateRelationsPayload body: Environment relations data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_update_relations_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_update_relations_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def endpoint_update_relations_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update relations for a list of environments  # noqa: E501

        Update relations for a list of environments Edge groups, tags and environment group can be updated.  **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_update_relations_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndpointsEndpointUpdateRelationsPayload body: Environment relations data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_update_relations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `endpoint_update_relations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/relations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_id_docker_v2_browse_put_post(self, id, path, file, **kwargs):  # noqa: E501
        """Upload a file under a specific path on the file system of an environment (endpoint)  # noqa: E501

        Use this environment(endpoint) to upload TLS files. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_docker_v2_browse_put_post(id, path, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param str path: The destination path to upload the file to (required)
        :param file file: The file to upload (required)
        :param str volume_id: Optional volume identifier to upload the file
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_id_docker_v2_browse_put_post_with_http_info(id, path, file, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_id_docker_v2_browse_put_post_with_http_info(id, path, file, **kwargs)  # noqa: E501
            return data

    def endpoints_id_docker_v2_browse_put_post_with_http_info(self, id, path, file, **kwargs):  # noqa: E501
        """Upload a file under a specific path on the file system of an environment (endpoint)  # noqa: E501

        Use this environment(endpoint) to upload TLS files. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_docker_v2_browse_put_post_with_http_info(id, path, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Environment(Endpoint) identifier (required)
        :param str path: The destination path to upload the file to (required)
        :param file file: The file to upload (required)
        :param str volume_id: Optional volume identifier to upload the file
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'path', 'file', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_id_docker_v2_browse_put_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoints_id_docker_v2_browse_put_post`")  # noqa: E501
        # verify the required parameter 'path' is set
        if self.api_client.client_side_validation and ('path' not in params or
                                                       params['path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path` when calling `endpoints_id_docker_v2_browse_put_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `endpoints_id_docker_v2_browse_put_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'volume_id' in params:
            query_params.append(('volumeID', params['volume_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'path' in params:
            form_params.append(('Path', params['path']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/docker/v2/browse/put', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_id_edge_jobs_job_id_logs_post(self, id, job_id, **kwargs):  # noqa: E501
        """Inspect an EdgeJob Log  # noqa: E501

        **Access policy**: public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_jobs_job_id_logs_post(id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: environment(endpoint) Id (required)
        :param int job_id: Job Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_id_edge_jobs_job_id_logs_post_with_http_info(id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_id_edge_jobs_job_id_logs_post_with_http_info(id, job_id, **kwargs)  # noqa: E501
            return data

    def endpoints_id_edge_jobs_job_id_logs_post_with_http_info(self, id, job_id, **kwargs):  # noqa: E501
        """Inspect an EdgeJob Log  # noqa: E501

        **Access policy**: public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_jobs_job_id_logs_post_with_http_info(id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: environment(endpoint) Id (required)
        :param int job_id: Job Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_id_edge_jobs_job_id_logs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoints_id_edge_jobs_job_id_logs_post`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `endpoints_id_edge_jobs_job_id_logs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobID'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/edge/jobs/{jobID}/logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_id_edge_stacks_stack_id_get(self, id, stack_id, **kwargs):  # noqa: E501
        """Inspect an Edge Stack for an Environment(Endpoint)  # noqa: E501

        **Access policy**: public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_stacks_stack_id_get(id, stack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: environment(endpoint) Id (required)
        :param int stack_id: EdgeStack Id (required)
        :return: EdgeStackPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, **kwargs)  # noqa: E501
            return data

    def endpoints_id_edge_stacks_stack_id_get_with_http_info(self, id, stack_id, **kwargs):  # noqa: E501
        """Inspect an Edge Stack for an Environment(Endpoint)  # noqa: E501

        **Access policy**: public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: environment(endpoint) Id (required)
        :param int stack_id: EdgeStack Id (required)
        :return: EdgeStackPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'stack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_id_edge_stacks_stack_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoints_id_edge_stacks_stack_id_get`")  # noqa: E501
        # verify the required parameter 'stack_id' is set
        if self.api_client.client_side_validation and ('stack_id' not in params or
                                                       params['stack_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stack_id` when calling `endpoints_id_edge_stacks_stack_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'stack_id' in params:
            path_params['stackId'] = params['stack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/edge/stacks/{stackId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeStackPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
